# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].PartFromInputFile(inputFileName='D:/temp/acou1.inp')
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, origin=(0.0, 0.0, 0.0), point1=(1.0, 0.0, 0.0), point2=(0.0, 
    0.0, -1.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='DUMMY-1', part=
    mdb.models['Model-1'].parts['DUMMY'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='SHELLS-1-1', 
    part=mdb.models['Model-1'].parts['SHELLS-1'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='WATER-1-1', 
    part=mdb.models['Model-1'].parts['WATER-1'])
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model')
del mdb.models['Model-1']
mdb.openStep('D:/temp/GHS-New2.stp', scaleFromFile=OFF)
mdb.models['Model'].PartFromGeometryFile(combine=False, dimensionality=THREE_D, 
    geometryFile=mdb.acis, name='GHS-New2', type=DEFORMABLE_BODY)
mdb.models['Model'].Material(name='PLA')
mdb.models['Model'].materials['PLA'].Elastic(table=((12000000000.0, 0.27), ))
mdb.models['Model'].materials['PLA'].Density(table=((1210.0, ), ))
mdb.models['Model'].Material(name='Material-2')
mdb.models['Model'].materials['Material-2'].AcousticMedium(
    acousticVolumetricDrag=ON, bulkTable=((141179.0, ), ), volumetricTable=((
    343.0, 3000.0), ))
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF, bulkTable=((2250000000.0, ), ))
mdb.models['Model'].materials['Material-2'].Density(table=((1000.0, ), ))
mdb.models['Model'].HomogeneousSolidSection(material='Material-2', name=
    'Section-1', thickness=None)
mdb.models['Model'].HomogeneousSolidSection(material='PLA', name='Section-2', 
    thickness=None)
mdb.models['Model'].parts['GHS-New2'].Set(cells=
    mdb.models['Model'].parts['GHS-New2'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Model'].parts['GHS-New2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model'].parts['GHS-New2'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model'].parts['GHS-New2'].Set(cells=
    mdb.models['Model'].parts['GHS-New2'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-2')
mdb.models['Model'].parts['GHS-New2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model'].parts['GHS-New2'].sets['Set-2'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Model'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model'].rootAssembly.Instance(dependent=ON, name='GHS-New2-1', 
    part=mdb.models['Model'].parts['GHS-New2'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].FrequencyStep(description='Frequency extraction', maxEigen=
    3200.0, minEigen=400.0, name='Step-1', numEigen=50, previous='Initial')
mdb.models['Model'].SteadyStateDirectStep(description=
    'DRIVE 100 TO 1000 HZ, 5 Hz Incs, LINEAR FREQUENCY SCALE', frequencyRange=(
    (100.0, 1000.0, 181, 1.0), ), name='Step-2', previous='Step-1')
mdb.models['Model'].SteadyStateModalStep(frequencyRange=((100.0, 1000.0, 181, 
    1.0), ), name='Step-3', previous='Step-2')
mdb.models['Model'].FieldOutputRequest(createStepName='Step-2', frequency=177, 
    name='F-Output-2', variables=('S', 'U', 'POR', 'ACV', 'GRADP', 'INFC', 
    'INFN', 'INFR', 'INTEN', 'PINF'))
mdb.models['Model'].FieldOutputRequest(createStepName='Step-3', frequency=177, 
    name='F-Output-3', variables=('S', 'U', 'POR', 'ACV', 'GRADP', 'INFC', 
    'INFN', 'INFR', 'INTEN', 'PINF'))
mdb.models['Model'].rootAssembly.Set(name='Set-1', vertices=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].vertices.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model'].ConcentratedForce(cf2=(1+0j), cf3=(1+1j), createStepName=
    'Step-2', distributionType=UNIFORM, field='', localCsys=None, name=
    'CFORCE-1', region=mdb.models['Model'].rootAssembly.sets['Set-1'])
mdb.models['Model'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].rootAssembly.makeDependent(instances=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'], ))
mdb.models['Model'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'], ))
mdb.models['Model'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'], ), size=3.4)
mdb.models['Model'].rootAssembly.setMeshControls(elemShape=TET, regions=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=FREE)
mdb.models['Model'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model'].rootAssembly.generateMesh(regions=(
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'], ))
mdb.models['Model'].rootAssembly.Set(name='Set-Node-1', nodes=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].nodes.getSequenceFromMask(
    mask=('[#0:431 #10000000 ]', ), ))
mdb.models['Model'].loads['CFORCE-1'].setValues(distributionType=UNIFORM, 
    field='', region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'])
mdb.models['Model'].rootAssembly.Set(name='Set-Node-2', nodes=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].nodes.getSequenceFromMask(
    mask=('[#0:882 #4000000 ]', ), ))
mdb.models['Model'].ConcentratedForce(cf2=(1+0j), cf3=(1+1j), createStepName=
    'Step-3', distributionType=UNIFORM, field='', localCsys=None, name=
    'CFORCE-2', region=mdb.models['Model'].rootAssembly.sets['Set-Node-2'])
mdb.models['Model'].InwardVolAccel(createStepName='Step-3', magnitude=1j, name=
    'Load-3', region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], u1=0.0, 
    u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model'].boundaryConditions['BC-1'].move('Step-1', 'Initial')
#* Cannot move a boundary condition created in a perturbation step.
mdb.models['Model'].boundaryConditions['BC-1'].setValues(ur1=0.0)
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Step-2', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], u1=
    UNSET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=0j)
mdb.models['Model'].boundaryConditions['BC-2'].move('Step-2', 'Initial')
#* Cannot move a boundary condition created in a perturbation step.
mdb.models['Model'].boundaryConditions['BC-1'].setValues(u2=0.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-HounyComb', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have inactive dof on which boundary conditions are specified. The nodes have been identified in node set ErrNodeBCInactiveDof.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.models['Model'].loads['Load-3'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-3', 
    region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], u1=SET, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-4', 
    region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], u1=UNSET, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=SET)
mdb.models['Model'].boundaryConditions['BC-2'].suppress()
mdb.models['Model'].boundaryConditions['BC-1'].suppress()
mdb.models['Model'].boundaryConditions['BC-1'].resume()
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#11 ]', ), ), name='Set-6')
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Step-2', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-5', region=mdb.models['Model'].rootAssembly.sets['Set-6'], u1=(1+0j), 
    u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model'].TabularAmplitude(data=((100.0, 5.21706e-06), (101.0, 
    5.30853e-06), (102.0, 5.40609e-06), (103.0, 5.5116e-06), (104.0, 
    5.62777e-06), (105.0, 5.75886e-06), (106.0, 5.9119e-06), (107.0, 
    6.09943e-06), (108.0, 6.3462e-06), (109.0, 6.70894e-06), (110.0, 
    7.35281e-06), (111.0, 9.04761e-06), (112.0, 4.59659e-05), (113.0, 
    1.71066e-06), (114.0, 3.92695e-06), (115.0, 4.67124e-06), (116.0, 
    5.07451e-06), (117.0, 5.34605e-06), (118.0, 5.55348e-06), (119.0, 
    5.72536e-06), (120.0, 5.87582e-06), (121.0, 6.01276e-06), (122.0, 
    6.14091e-06), (123.0, 6.26338e-06), (124.0, 6.38228e-06), (125.0, 
    6.49919e-06), (126.0, 6.61531e-06), (127.0, 6.73166e-06), (128.0, 
    6.84912e-06), (129.0, 6.96855e-06), (130.0, 7.09081e-06), (131.0, 
    7.21684e-06), (132.0, 7.34773e-06), (133.0, 7.48478e-06), (134.0, 
    7.62961e-06), (135.0, 7.7844e-06), (136.0, 7.95207e-06), (137.0, 
    8.13681e-06), (138.0, 8.34482e-06), (139.0, 8.5858e-06), (140.0, 
    8.87598e-06), (141.0, 9.24468e-06), (142.0, 9.75125e-06), (143.0, 
    1.05371e-05), (144.0, 1.20427e-05), (145.0, 1.66966e-05), (146.0, 
    5.85159e-05), (147.0, 1.55753e-06), (148.0, 4.9064e-06), (149.0, 
    6.18848e-06), (150.0, 6.91457e-06), (151.0, 7.41419e-06), (152.0, 
    7.80177e-06), (153.0, 8.12794e-06), (154.0, 8.41901e-06), (155.0, 
    8.69046e-06), (156.0, 8.95256e-06), (157.0, 9.21298e-06), (158.0, 
    9.47833e-06), (159.0, 9.75517e-06), (160.0, 1.0051e-05), (161.0, 
    1.03752e-05), (162.0, 1.07415e-05), (163.0, 1.11708e-05), (164.0, 
    1.16983e-05), (165.0, 1.23902e-05), (166.0, 1.33884e-05), (167.0, 
    1.50652e-05), (168.0, 1.88204e-05), (169.0, 3.85997e-05), (170.0, 
    1.23372e-05), (171.0, 2.54451e-06), (172.0, 5.94393e-06), (173.0, 
    7.56422e-06), (174.0, 8.58792e-06), (175.0, 9.34826e-06), (176.0, 
    9.97789e-06), (177.0, 1.05426e-05), (178.0, 1.10821e-05), (179.0, 
    1.16254e-05), (180.0, 1.21997e-05), (181.0, 1.28369e-05), (182.0, 
    1.35828e-05), (183.0, 1.45143e-05), (184.0, 1.57821e-05), (185.0, 
    1.77416e-05), (186.0, 2.15011e-05), (187.0, 3.32514e-05), (188.0, 
    0.000130886), (189.0, 4.00882e-06), (190.0, 4.07277e-06), (191.0, 
    7.23686e-06), (192.0, 9.08059e-06), (193.0, 1.04041e-05), (194.0, 
    1.14948e-05), (195.0, 1.24917e-05), (196.0, 1.34841e-05), (197.0, 
    1.45515e-05), (198.0, 1.57931e-05), (199.0, 1.73731e-05), (200.0, 
    1.96336e-05), (201.0, 2.34988e-05), (202.0, 3.27799e-05), (203.0, 
    0.000108243), (204.0, 2.09656e-05), (205.0, 4.65658e-07), (206.0, 
    5.44458e-06), (207.0, 8.53761e-06), (208.0, 1.06536e-05), (209.0, 
    1.23714e-05), (210.0, 1.39577e-05), (211.0, 1.55925e-05), (212.0, 
    1.74633e-05), (213.0, 1.98643e-05), (214.0, 2.34339e-05), (215.0, 
    3.01076e-05), (216.0, 5.0521e-05), (217.0, 0.000261205), (218.0, 
    1.46836e-05), (219.0, 1.43062e-07), (220.0, 5.60135e-06), (221.0, 
    9.03307e-06), (222.0, 1.16039e-05), (223.0, 1.38654e-05), (224.0, 
    1.61371e-05), (225.0, 1.87221e-05), (226.0, 2.20883e-05), (227.0, 
    2.7302e-05), (228.0, 3.79948e-05), (229.0, 8.22265e-05), (230.0, 
    8.51825e-05), (231.0, 1.40191e-05), (232.0, 1.14039e-06), (233.0, 
    4.80633e-06), (234.0, 8.63816e-06), (235.0, 1.1661e-05), (236.0, 
    1.44405e-05), (237.0, 1.73627e-05), (238.0, 2.08736e-05), (239.0, 
    2.57971e-05), (240.0, 3.43758e-05), (241.0, 5.69187e-05), (242.0, 
    0.000573431), (243.0, 4.01047e-05), (244.0, 1.10109e-05), (245.0, 
    1.1529e-06), (246.0, 4.30909e-06), (247.0, 8.17518e-06), (248.0, 
    1.14103e-05), (249.0, 1.45113e-05), (250.0, 1.78804e-05), (251.0, 
    2.20502e-05), (252.0, 2.80881e-05), (253.0, 3.90817e-05), (254.0, 
    7.07838e-05), (255.0, 0.00143475), (256.0, 4.30181e-05), (257.0, 
    1.47588e-05), (258.0, 4.36092e-06), (259.0, 1.51656e-06), (260.0, 
    5.66328e-06), (261.0, 9.06917e-06), (262.0, 1.22308e-05), (263.0, 
    1.55093e-05), (264.0, 1.93084e-05), (265.0, 2.42962e-05), (266.0, 
    3.19944e-05), (267.0, 4.73456e-05), (268.0, 0.000102698), (269.0, 
    0.000225093), (270.0, 4.07339e-05), (271.0, 1.69449e-05), (272.0, 
    6.98846e-06), (273.0, 1.11718e-06), (274.0, 3.06466e-06), (275.0, 
    6.46155e-06), (276.0, 9.52745e-06), (277.0, 1.25661e-05), (278.0, 
    1.58638e-05), (279.0, 1.98032e-05), (280.0, 2.50677e-05), (281.0, 
    3.32332e-05), (282.0, 4.92923e-05), (283.0, 0.000103055), (284.0, 
    0.000372428), (285.0, 5.37139e-05), (286.0, 2.39416e-05), (287.0, 
    1.2171e-05), (288.0, 5.50242e-06), (289.0, 9.41627e-07), (290.0, 
    2.59402e-06), (291.0, 5.61111e-06), (292.0, 8.40347e-06), (293.0, 
    1.11871e-05), (294.0, 1.41715e-05), (295.0, 1.7626e-05), (296.0, 
    2.19881e-05), (297.0, 2.81288e-05), (298.0, 3.82121e-05), (299.0, 
    5.97723e-05), (300.0, 0.000150882), (301.0, 0.000203763), (302.0, 
    5.24087e-05), (303.0, 2.62201e-05), (304.0, 1.48989e-05), (305.0, 
    8.29184e-06), (306.0, 3.7478e-06), (307.0, 2.58637e-07), (308.0, 
    2.65421e-06), (309.0, 5.26051e-06), (310.0, 7.74065e-06), (311.0, 
    1.02417e-05), (312.0, 1.2914e-05), (313.0, 1.5948e-05), (314.0, 
    1.96352e-05), (315.0, 2.44981e-05), (316.0, 3.16413e-05), (317.0, 
    4.39649e-05), (318.0, 7.25002e-05), (319.0, 0.000233268), (320.0, 
    0.000157595), (321.0, 5.2783e-05), (322.0, 2.8618e-05), (323.0, 
    1.74996e-05), (324.0, 1.08519e-05), (325.0, 6.22718e-06), (326.0, 
    2.62328e-06), (327.0, 6.1045e-07), (328.0, 1.37828e-05), (329.0, 
    3.60076e-06), (330.0, 6.28064e-06), (331.0, 8.64192e-06), (332.0, 
    1.10458e-05), (333.0, 1.3667e-05), (334.0, 1.67005e-05), (335.0, 
    2.04411e-05), (336.0, 2.54169e-05), (337.0, 3.27319e-05), (338.0, 
    4.52132e-05), (339.0, 7.30421e-05), (340.0, 0.000202888), (341.0, 
    0.000219313), (342.0, 6.53967e-05), (343.0, 3.56698e-05), (344.0, 
    2.26927e-05), (345.0, 1.52066e-05), (346.0, 1.01839e-05), (347.0, 
    6.46425e-06), (348.0, 3.50372e-06), (349.0, 1.0093e-06), (350.0, 
    1.19512e-06), (351.0, 3.22682e-06), (352.0, 5.17289e-06), (353.0, 
    7.10662e-06), (354.0, 9.09896e-06), (355.0, 1.12291e-05), (356.0, 
    1.35976e-05), (357.0, 1.63474e-05), (358.0, 1.9703e-05), (359.0, 
    2.40531e-05), (360.0, 3.01536e-05), (361.0, 3.97155e-05), (362.0, 
    5.76544e-05), (363.0, 0.000106293), (364.0, 0.000904601), (365.0, 
    0.000127006), (366.0, 5.57399e-05), (367.0, 3.36749e-05), (368.0, 
    2.26714e-05), (369.0, 1.58887e-05), (370.0, 1.11038e-05), (371.0, 
    7.11135e-06), (372.0, 7.00345e-06), (373.0, 3.19255e-06), (374.0, 
    9.27267e-07), (375.0, 1.0345e-06), (376.0, 2.84713e-06), (377.0, 
    4.58898e-06), (378.0, 6.31878e-06), (379.0, 8.09049e-06), (380.0, 
    9.96182e-06), (381.0, 1.20025e-05), (382.0, 1.43056e-05), (383.0, 
    1.70067e-05), (384.0, 2.03196e-05), (385.0, 2.46113e-05), (386.0, 
    3.05801e-05), (387.0, 3.97512e-05), (388.0, 5.62383e-05), (389.0, 
    9.63323e-05), (390.0, 0.000362499), (391.0, 0.000188609), (392.0, 
    7.10932e-05), (393.0, 4.18677e-05), (394.0, 2.83616e-05), (395.0, 
    2.04274e-05), (396.0, 1.5099e-05), (397.0, 1.11923e-05), (398.0, 
    8.14021e-06), (399.0, 5.6354e-06), (400.0, 3.49549e-06), (401.0, 
    1.60375e-06), (402.0, 1.19743e-07), (403.0, 1.73348e-06), (404.0, 
    3.28353e-06), (405.0, 4.80922e-06), (406.0, 6.34732e-06), (407.0, 
    7.93563e-06), (408.0, 9.61674e-06), (409.0, 1.14429e-05), (410.0, 
    1.34829e-05), (411.0, 1.5834e-05), (412.0, 1.86422e-05), (413.0, 
    2.21424e-05), (414.0, 2.67429e-05), (415.0, 3.3229e-05), (416.0, 
    4.33355e-05), (417.0, 6.18201e-05), (418.0, 0.000108167), (419.0, 
    0.000469075), (420.0, 0.000187643), (421.0, 7.49887e-05), (422.0, 
    4.51733e-05), (423.0, 3.11783e-05), (424.0, 2.29188e-05), (425.0, 
    1.73752e-05), (426.0, 1.33265e-05), (427.0, 1.01841e-05), (428.0, 
    7.62805e-06), (429.0, 5.46849e-06), (430.0, 3.58481e-06), (431.0, 
    1.89552e-06), (432.0, 3.42531e-07), (433.0, 1.11799e-06), (434.0, 
    2.52116e-06), (435.0, 3.89703e-06), (436.0, 5.2733e-06), (437.0, 
    6.67761e-06), (438.0, 8.13974e-06), (439.0, 9.69425e-06), (440.0, 
    1.1384e-05), (441.0, 1.32651e-05), (442.0, 1.54157e-05), (443.0, 
    1.79499e-05), (444.0, 2.10441e-05), (445.0, 2.49898e-05), (446.0, 
    3.03086e-05), (447.0, 3.80396e-05), (448.0, 5.06007e-05), (449.0, 
    7.52202e-05), (450.0, 0.000147787), (451.0, 0.0170559), (452.0, 
    0.000143628), (453.0, 6.91871e-05), (454.0, 4.42268e-05), (455.0, 
    3.1554e-05), (456.0, 2.378e-05), (457.0, 1.84475e-05), (458.0, 
    1.45041e-05), (459.0, 1.1423e-05), (460.0, 8.91069e-06), (461.0, 
    6.79002e-06), (462.0, 4.94705e-06), (463.0, 3.30452e-06), (464.0, 
    1.80747e-06), (465.0, 4.14924e-07), (466.0, 9.05113e-07), (467.0, 
    2.17896e-06), (468.0, 3.42955e-06), (469.0, 4.6781e-06), (470.0, 
    5.94565e-06), (471.0, 7.25444e-06), (472.0, 8.62951e-06), (473.0, 
    1.01008e-05), (474.0, 1.17057e-05), (475.0, 1.34939e-05), (476.0, 
    1.55334e-05), (477.0, 1.79223e-05), (478.0, 2.0809e-05), (479.0, 
    2.44312e-05), (480.0, 2.91968e-05), (481.0, 3.58721e-05), (482.0, 
    4.60911e-05), (483.0, 6.40719e-05), (484.0, 0.000105085), (485.0, 
    0.000300497), (486.0, 0.000327112), (487.0, 0.000102559), (488.0, 
    5.92246e-05), (489.0, 4.06096e-05), (490.0, 3.01357e-05), (491.0, 
    2.33381e-05), (492.0, 1.85095e-05), (493.0, 1.48559e-05), (494.0, 
    1.19569e-05), (495.0, 9.56903e-06), (496.0, 7.54093e-06), (497.0, 
    5.77306e-06), (498.0, 4.19689e-06), (499.0, 2.76316e-06), (500.0, 
    1.43507e-06), (501.0, 1.84001e-07), (502.0, 1.01326e-06), (503.0, 
    2.1764e-06), (504.0, 3.32297e-06), (505.0, 4.46951e-06), (506.0, 
    5.63247e-06), (507.0, 6.82921e-06), (508.0, 8.07905e-06), (509.0, 
    9.40454e-06), (510.0, 1.08333e-05), (511.0, 1.24005e-05), (512.0, 
    1.41527e-05), (513.0, 1.61538e-05), (514.0, 1.84956e-05), (515.0, 
    2.13151e-05), (516.0, 2.48281e-05), (517.0, 2.93967e-05), (518.0, 
    3.56806e-05), (519.0, 4.50238e-05), (520.0, 6.06562e-05), (521.0, 
    9.27988e-05), (522.0, 0.000199916), (523.0, 0.00109147), (524.0, 
    0.000141482), (525.0, 7.37638e-05), (526.0, 4.87621e-05), (527.0, 
    3.56134e-05), (528.0, 2.74124e-05), (529.0, 2.17418e-05), (530.0, 
    1.7535e-05), (531.0, 1.42472e-05), (532.0, 1.15703e-05), (533.0, 
    9.31524e-06), (534.0, 7.35827e-06), (535.0, 5.61226e-06), (536.0, 
    4.01023e-06), (537.0, 2.49278e-06), (538.0, 9.92934e-07), (539.0, 
    5.9772e-07), (540.0, 2.55888e-06), (541.0, 6.3507e-06), (542.0, 
    2.75736e-05), (543.0, 5.97734e-07), (544.0, 3.78626e-06), (545.0, 
    3.30094e-06), (546.0, 5.08658e-06), (547.0, 6.56535e-06), (548.0, 
    7.98148e-06), (549.0, 9.42036e-06), (550.0, 1.09357e-05), (551.0, 
    1.2576e-05), (552.0, 1.43957e-05), (553.0, 1.6464e-05), (554.0, 
    1.88766e-05), (555.0, 2.17738e-05), (556.0, 2.53738e-05), (557.0, 
    3.00392e-05), (558.0, 3.64225e-05), (559.0, 4.58335e-05), (560.0, 
    6.13498e-05), (561.0, 9.23263e-05), (562.0, 0.000187089), (563.0, 
    0.00444609), (564.0, 0.000168106), (565.0, 8.40125e-05), (566.0, 
    5.50169e-05), (567.0, 4.02034e-05), (568.0, 3.11285e-05), (569.0, 
    2.49402e-05), (570.0, 2.04061e-05), (571.0, 1.69067e-05), (572.0, 
    1.4096e-05), (573.0, 1.17653e-05), (574.0, 9.78125e-06), (575.0, 
    8.05414e-06), (576.0, 6.5213e-06), (577.0, 5.13739e-06), (578.0, 
    3.8685e-06), (579.0, 2.68855e-06), (580.0, 1.57684e-06), (581.0, 
    5.16468e-07), (582.0, 5.06859e-07), (583.0, 1.50563e-06), (584.0, 
    2.4912e-06), (585.0, 3.47433e-06), (586.0, 4.46561e-06), (587.0, 
    5.47602e-06), (588.0, 6.51732e-06), (589.0, 7.60268e-06), (590.0, 
    8.74737e-06), (591.0, 9.96971e-06), (592.0, 1.12923e-05), (593.0, 
    1.2744e-05), (594.0, 1.43626e-05), (595.0, 1.61988e-05), (596.0, 
    1.83237e-05), (597.0, 2.08394e-05), (598.0, 2.38998e-05), (599.0, 
    2.77476e-05), (600.0, 3.27915e-05), (601.0, 3.97766e-05), (602.0, 
    5.02232e-05), (603.0, 6.77898e-05), (604.0, 0.000104079), (605.0, 
    0.000225817), (606.0, 0.00118841), (607.0, 0.000159773), (608.0, 
    8.41213e-05), (609.0, 5.61779e-05), (610.0, 4.15207e-05), (611.0, 
    3.24206e-05), (612.0, 2.61687e-05), (613.0, 2.15694e-05), (614.0, 
    1.80128e-05), (615.0, 1.51551e-05), (616.0, 1.27876e-05), (617.0, 
    1.07759e-05), (618.0, 9.02946e-06), (619.0, 7.48497e-06), (620.0, 
    6.09652e-06), (621.0, 4.82988e-06), (622.0, 3.65883e-06), (623.0, 
    2.56273e-06), (624.0, 1.52492e-06), (625.0, 5.31561e-07), (626.0, 
    4.29153e-07), (627.0, 1.36763e-06), (628.0, 2.29336e-06), (629.0, 
    3.21531e-06), (630.0, 4.14225e-06), (631.0, 5.08315e-06), (632.0, 
    6.04748e-06), (633.0, 7.0456e-06), (634.0, 8.08928e-06), (635.0, 
    9.19225e-06), (636.0, 1.0371e-05), (637.0, 1.16459e-05), (638.0, 
    1.30426e-05), (639.0, 1.45946e-05), (640.0, 1.63464e-05), (641.0, 
    1.83591e-05), (642.0, 2.0719e-05), (643.0, 2.35532e-05), (644.0, 
    2.70564e-05), (645.0, 3.15449e-05), (646.0, 3.75697e-05), (647.0, 
    4.61919e-05), (648.0, 5.98284e-05), (649.0, 0.00348513), (650.0, 
    0.000137014), (651.0, 0.000430244), (652.0, 0.000369115), (653.0, 
    0.000126776), (654.0, 7.53173e-05), (655.0, 5.27784e-05), (656.0, 
    4.00311e-05), (657.0, 3.17675e-05), (658.0, 2.59268e-05), (659.0, 
    2.15414e-05), (660.0, 1.8096e-05), (661.0, 1.52906e-05), (662.0, 
    1.29378e-05), (663.0, 1.0914e-05), (664.0, 9.13283e-06), (665.0, 
    7.53075e-06), (666.0, 6.05749e-06), (667.0, 4.66869e-06), (668.0, 
    3.3179e-06), (669.0, 1.94259e-06), (670.0, 4.27913e-07), (671.0, 
    1.53064e-06), (672.0, 5.33559e-06), (673.0, 0.000105206), (674.0, 
    5.51758e-06), (675.0, 1.20089e-06), (676.0, 7.65784e-07), (677.0, 
    2.17656e-06), (678.0, 3.37889e-06), (679.0, 4.49167e-06), (680.0, 
    5.57045e-06), (681.0, 6.64808e-06), (682.0, 7.74839e-06), (683.0, 
    8.89198e-06), (684.0, 1.00993e-05), (685.0, 1.13929e-05), (686.0, 
    1.27994e-05), (687.0, 1.43518e-05), (688.0, 1.6093e-05), (689.0, 
    1.80808e-05), (690.0, 2.03954e-05), (691.0, 2.31525e-05), (692.0, 
    2.65267e-05), (693.0, 3.07944e-05), (694.0, 3.6422e-05), (695.0, 
    4.42641e-05), (696.0, 5.60749e-05), (697.0, 7.61168e-05), (698.0, 
    0.000118141), (699.0, 0.000264962), (700.0, 0.00102779), (701.0, 
    0.000171877), (702.0, 9.25434e-05), (703.0, 6.25581e-05), (704.0, 
    4.67018e-05), (705.0, 3.68279e-05), (706.0, 3.00422e-05), (707.0, 
    2.50574e-05), (708.0, 2.12136e-05), (709.0, 1.81374e-05), (710.0, 
    1.56015e-05), (711.0, 1.34596e-05), (712.0, 1.16131e-05), (713.0, 
    9.99295e-06), (714.0, 8.5494e-06), (715.0, 7.24545e-06), (716.0, 
    6.05298e-06), (717.0, 4.95013e-06), (718.0, 3.91951e-06), (719.0, 
    2.94702e-06), (720.0, 2.02099e-06), (721.0, 1.13153e-06), (722.0, 
    2.70062e-07), (723.0, 5.71004e-07), (724.0, 1.3986e-06), (725.0, 
    2.2192e-06), (726.0, 3.03908e-06), (727.0, 3.86447e-06), (728.0, 
    4.70175e-06), (729.0, 5.55767e-06), (730.0, 6.43954e-06), (731.0, 
    7.35554e-06), (732.0, 8.31502e-06), (733.0, 9.32891e-06), (734.0, 
    1.04103e-05), (735.0, 1.15751e-05), (736.0, 1.28431e-05), (737.0, 
    1.42397e-05), (738.0, 1.57976e-05), (739.0, 1.75603e-05), (740.0, 
    1.95872e-05), (741.0, 2.19614e-05), (742.0, 2.48035e-05), (743.0, 
    2.82958e-05), (744.0, 3.27271e-05), (745.0, 3.85848e-05), (746.0, 
    4.67617e-05), (747.0, 5.9089e-05), (748.0, 8.00074e-05), (749.0, 
    0.000123798), (750.0, 0.000275684), (751.0, 0.00112882), (752.0, 
    0.000181898), (753.0, 9.75944e-05), (754.0, 6.58948e-05), (755.0, 
    4.91775e-05), (756.0, 3.8789e-05), (757.0, 3.16632e-05), (758.0, 
    2.64382e-05), (759.0, 2.24168e-05), (760.0, 1.92048e-05), (761.0, 
    1.65623e-05), (762.0, 1.43352e-05), (763.0, 1.24194e-05), (764.0, 
    1.07424e-05), (765.0, 9.25164e-06), (766.0, 7.90842e-06), (767.0, 
    6.68316e-06), (768.0, 5.55293e-06), (769.0, 4.49957e-06), (770.0, 
    3.50834e-06), (771.0, 2.56709e-06), (772.0, 1.66556e-06), (773.0, 
    7.9489e-07), (774.0, 5.27546e-08), (775.0, 8.84496e-07), (776.0, 
    1.707e-06), (777.0, 2.52671e-06), (778.0, 3.35007e-06), (779.0, 
    4.18378e-06), (780.0, 5.03505e-06), (781.0, 5.91197e-06), (782.0, 
    6.82401e-06), (783.0, 7.78275e-06), (784.0, 8.80304e-06), (785.0, 
    9.90512e-06), (786.0, 1.11185e-05), (787.0, 1.24907e-05), (788.0, 
    1.41081e-05), (789.0, 1.61623e-05), (790.0, 1.92313e-05), (791.0, 
    2.67298e-05), (792.0, 1.64482e-05), (793.0, 1.45135e-05), (794.0, 
    2.36264e-05), (795.0, 1.66339e-05), (796.0, 2.35486e-05), (797.0, 
    2.85185e-05), (798.0, 3.41226e-05), (799.0, 4.12853e-05), (800.0, 
    5.12852e-05), (801.0, 6.67154e-05), (802.0, 9.42991e-05), (803.0, 
    0.000159129), (804.0, 0.000505077), (805.0, 0.000425415), (806.0, 
    0.000148163), (807.0, 8.87515e-05), (808.0, 6.23806e-05), (809.0, 
    5.11024e-05), (810.0, 3.94042e-05), (811.0, 3.25292e-05), (812.0, 
    2.74769e-05), (813.0, 2.35594e-05), (814.0, 2.04096e-05), (815.0, 
    1.78049e-05), (816.0, 1.56015e-05), (817.0, 1.37017e-05), (818.0, 
    1.20367e-05), (819.0, 1.05565e-05), (820.0, 9.22397e-06), (821.0, 
    8.01073e-06), (822.0, 6.89471e-06), (823.0, 5.85839e-06), (824.0, 
    4.88767e-06), (825.0, 3.97093e-06), (826.0, 3.09849e-06), (827.0, 
    2.26212e-06), (828.0, 1.45471e-06), (829.0, 6.69958e-07), (830.0, 
    9.77694e-08), (831.0, 8.53669e-07), (832.0, 1.60263e-06), (833.0, 
    2.34935e-06), (834.0, 3.09849e-06), (835.0, 3.85475e-06), (836.0, 
    4.623e-06), (837.0, 5.40846e-06), (838.0, 6.21675e-06), (839.0, 
    7.05414e-06), (840.0, 7.92774e-06), (841.0, 8.84574e-06), (842.0, 
    9.81779e-06), (843.0, 1.08554e-05), (844.0, 1.19726e-05), (845.0, 
    1.31866e-05), (846.0, 1.45194e-05), (847.0, 1.59986e-05), (848.0, 
    1.76608e-05), (849.0, 1.95546e-05), (850.0, 2.17465e-05), (851.0, 
    2.43301e-05), (852.0, 2.7442e-05), (853.0, 3.12889e-05), (854.0, 
    3.62003e-05), (855.0, 4.27357e-05), (856.0, 5.19278e-05), (857.0, 
    6.59181e-05), (858.0, 8.99901e-05), (859.0, 0.000141676), (860.0, 
    0.00033519), (861.0, 0.000878654), (862.0, 0.000187519), (863.0, 
    0.00010385), (864.0, 7.11301e-05), (865.0, 5.36017e-05), (866.0, 
    4.26237e-05), (867.0, 3.50633e-05), (868.0, 2.95101e-05), (869.0, 
    2.52354e-05), (870.0, 2.18245e-05), (871.0, 1.90241e-05), (872.0, 
    1.66706e-05), (873.0, 1.46534e-05), (874.0, 1.28953e-05), (875.0, 
    1.13405e-05), (876.0, 9.94759e-06), (877.0, 8.68521e-06), (878.0, 
    7.52913e-06), (879.0, 6.46021e-06), (880.0, 5.4631e-06), (881.0, 
    4.52526e-06), (882.0, 3.63631e-06), (883.0, 2.78747e-06), (884.0, 
    1.97121e-06), (885.0, 1.18095e-06), (886.0, 4.10819e-07), (887.0, 
    3.44535e-07), (888.0, 1.09009e-06), (889.0, 1.83062e-06), (890.0, 
    2.5708e-06), (891.0, 3.31534e-06), (892.0, 4.06914e-06), (893.0, 
    4.83746e-06), (894.0, 5.62608e-06), (895.0, 6.44161e-06), (896.0, 
    7.29179e-06), (897.0, 8.18612e-06), (898.0, 9.13659e-06), (899.0, 
    1.01592e-05), (900.0, 1.12765e-05), (901.0, 1.25227e-05), (902.0, 
    1.39554e-05), (903.0, 1.56861e-05), (904.0, 1.7981e-05), (905.0, 
    2.1751e-05), (906.0, 3.43607e-05), (907.0, 2.08814e-06), (908.0, 
    1.44066e-05), (909.0, 1.93832e-05), (910.0, 2.32447e-05), (911.0, 
    2.71825e-05), (912.0, 3.1704e-05), (913.0, 3.72852e-05), (914.0, 
    4.46111e-05), (915.0, 5.49001e-05), (916.0, 7.06931e-05), (917.0, 
    9.84476e-05), (918.0, 0.000160982), (919.0, 0.000439485), (920.0, 
    0.000594758), (921.0, 0.000175857), (922.0, 0.000102377), (923.0, 
    7.16602e-05), (924.0, 5.47095e-05), (925.0, 4.3911e-05), (926.0, 
    3.63915e-05), (927.0, 3.08255e-05), (928.0, 2.65163e-05), (929.0, 
    2.30626e-05), (930.0, 2.02164e-05), (931.0, 1.78159e-05), (932.0, 
    1.57503e-05), (933.0, 1.39399e-05), (934.0, 1.23237e-05), (935.0, 
    1.08476e-05), (936.0, 9.44432e-06), (937.0, 7.92877e-06), (938.0, 
    1.84053e-06), (939.0, 7.62953e-06), (940.0, 6.14262e-06), (941.0, 
    5.09546e-06), (942.0, 4.17783e-06), (943.0, 3.32952e-06), (944.0, 
    2.52748e-06), (945.0, 1.75921e-06), (946.0, 1.01638e-06), (947.0, 
    2.92642e-07), (948.0, 4.17214e-07), (949.0, 1.11775e-06), (950.0, 
    1.8131e-06), (951.0, 2.50721e-06), (952.0, 3.20389e-06), (953.0, 
    3.90696e-06), (954.0, 4.62035e-06), (955.0, 5.34818e-06), (956.0, 
    6.0949e-06), (957.0, 6.86534e-06), (958.0, 7.66491e-06), (959.0, 
    8.49974e-06), (960.0, 9.37689e-06), (961.0, 1.03046e-05), (962.0, 
    1.12927e-05), (963.0, 1.23529e-05), (964.0, 1.34995e-05), (965.0, 
    1.47504e-05), (966.0, 1.6128e-05), (967.0, 1.76606e-05), (968.0, 
    1.93858e-05), (969.0, 2.13528e-05), (970.0, 2.36293e-05), (971.0, 
    2.63094e-05), (972.0, 2.95292e-05), (973.0, 3.34932e-05), (974.0, 
    3.85227e-05), (975.0, 4.51542e-05), (976.0, 5.43565e-05), (977.0, 
    6.80764e-05), (978.0, 9.0896e-05), (979.0, 0.000136869), (980.0, 
    0.000395135), (981.0, 0.0156943), (982.0, 0.000257936), (983.0, 
    0.000128804), (984.0, 8.50351e-05), (985.0, 6.28976e-05), (986.0, 
    4.94558e-05), (987.0, 4.03663e-05), (988.0, 3.37543e-05), (989.0, 
    2.867e-05), (990.0, 2.45642e-05), (991.0, 2.10573e-05), (992.0, 
    1.77456e-05), (993.0, 1.34114e-05), (994.0, 6.56838e-05), (995.0, 
    1.71918e-05), (996.0, 1.40009e-05), (997.0, 1.20447e-05), (998.0, 
    1.04974e-05), (999.0, 9.1683e-06), (1000.0, 7.98181e-06)), name=
    'STEPANISHEN_COX', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model'].boundaryConditions['BC-5'].setValues(amplitude=
    'STEPANISHEN_COX')
mdb.models['Model'].boundaryConditions['BC-1'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.models['Model'].historyOutputRequests['H-Output-1'].suppress()
mdb.models['Model'].HistoryOutputRequest(createStepName='Step-2', name=
    'H-Output-2', rebar=EXCLUDE, region=
    mdb.models['Model'].rootAssembly.sets['Set-Node-1'], sectionPoints=DEFAULT, 
    variables=('U1', ))
mdb.models['Model'].HistoryOutputRequest(createStepName='Step-2', name=
    'H-Output-3', rebar=EXCLUDE, region=
    mdb.models['Model'].rootAssembly.sets['Set-Node-1'], sectionPoints=DEFAULT, 
    variables=('GU', 'POR'))
mdb.models['Model'].HistoryOutputRequest(createStepName='Step-3', name=
    'H-Output-4', variables=('GU', ))
mdb.models['Model'].historyOutputRequests['H-Output-4'].setValues(rebar=EXCLUDE
    , region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], 
    sectionPoints=DEFAULT, variables=('GU', ))
mdb.models['Model'].HistoryOutputRequest(createStepName='Step-3', name=
    'H-Output-5', rebar=EXCLUDE, region=
    mdb.models['Model'].rootAssembly.sets['Set-Node-1'], sectionPoints=DEFAULT, 
    variables=('GU', 'POR'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.models['Model'].fieldOutputRequests['F-Output-1'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO OUTPUT VARIABLES ARE SPECIFIED FOR *NODE OUTPUT. THIS OUTPUT REQUEST IS IGNORED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.models['Model'].fieldOutputRequests['F-Output-2'].setValues(rebar=INCLUDE, 
    sectionPoints=DEFAULT)
mdb.models['Model'].fieldOutputRequests['F-Output-3'].setValues(rebar=INCLUDE, 
    sectionPoints=DEFAULT)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO OUTPUT VARIABLES ARE SPECIFIED FOR *NODE OUTPUT. THIS OUTPUT REQUEST IS IGNORED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT WITH REBAR PARAMETER IS CURRENTLY AVAILABLE FOR MEMBRANE, SHELL OR SURFACE ELEMENTS ONLY. IN ORDER TO VISUALIZE THE REBAR RESULTS, YOU SHOULD CONVERT THE INPUT DATA SO THAT THE REBAR IS DEFINED USING MEMBRANE, SHELL OR SURFACE ELEMENTS.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT WITH REBAR PARAMETER IS CURRENTLY AVAILABLE FOR MEMBRANE, SHELL OR SURFACE ELEMENTS ONLY. IN ORDER TO VISUALIZE THE REBAR RESULTS, YOU SHOULD CONVERT THE INPUT DATA SO THAT THE REBAR IS DEFINED USING MEMBRANE, SHELL OR SURFACE ELEMENTS.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
del mdb.models['Model'].fieldOutputRequests['F-Output-1']
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO OUTPUT VARIABLES ARE SPECIFIED FOR *NODE OUTPUT. THIS OUTPUT REQUEST IS IGNORED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT SUPPORTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR ELEMENT TYPE C3D10', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT WITH REBAR PARAMETER IS CURRENTLY AVAILABLE FOR MEMBRANE, SHELL OR SURFACE ELEMENTS ONLY. IN ORDER TO VISUALIZE THE REBAR RESULTS, YOU SHOULD CONVERT THE INPUT DATA SO THAT THE REBAR IS DEFINED USING MEMBRANE, SHELL OR SURFACE ELEMENTS.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST ACV IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST GRADP IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INTEN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT WITH REBAR PARAMETER IS CURRENTLY AVAILABLE FOR MEMBRANE, SHELL OR SURFACE ELEMENTS ONLY. IN ORDER TO VISUALIZE THE REBAR RESULTS, YOU SHOULD CONVERT THE INPUT DATA SO THAT THE REBAR IS DEFINED USING MEMBRANE, SHELL OR SURFACE ELEMENTS.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-HounyComb.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-HounyComb'})
mdb.models['Model'].fieldOutputRequests['F-Output-2'].setValues(rebar=INCLUDE, 
    region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], sectionPoints=
    DEFAULT, variables=('ACV', 'GRADP', 'INFC', 'INFN', 'INFR', 'INTEN', 
    'PINF', 'POR', 'S', 'U'))
mdb.models['Model'].fieldOutputRequests['F-Output-3'].setValues(rebar=INCLUDE, 
    region=mdb.models['Model'].rootAssembly.sets['Set-Node-1'], sectionPoints=
    DEFAULT, variables=('ACV', 'GRADP', 'INFC', 'INFN', 'INFR', 'INTEN', 
    'PINF', 'POR', 'S', 'U'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].FieldOutputRequest(createStepName='Step-1', name=
    'F-Output-4', variables=('S', 'POR'))
mdb.jobs['Job-HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-HounyComb.odb', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9440, 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STEP, {'stepName': 'Frequency extraction', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-HounyComb', 'memory': 1393.0})
mdb.jobs['Job-HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 136.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE MAY BE MORE EIGENVALUES IN THE SPECIFIED RANGE THAN REQUESTED. IF THE NUMBER OF EIGENVALUES WAS NOT EXPLICITLY REQUESTED, SPECIFY THE MAXIMUM NUMBER OF EIGENVALUES TO BE EXTRACTED', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'Job-HounyComb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-HounyComb']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STEP, {
    'stepName': 'DRIVE 100 TO 1000 HZ, 5 Hz Incs, LINEAR FREQUENCY SCALE', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-HounyComb', 'memory': 2698.0})
mdb.jobs['Job-HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 376.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-HounyComb'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.saveAs(pathName='D:/temp/abaqus-acoustic.cae')
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 409 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 100.0, 'increment': 1, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 416 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 101.287430882119, 'increment': 2, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 428 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 102.591436547001, 'increment': 3, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 439 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 103.912230383517, 'increment': 4, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 452 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 105.250028527773, 'increment': 5, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 465 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 106.605049898479, 'increment': 6, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 479 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 107.977516232771, 'increment': 7, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 490 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 109.367652122497, 'increment': 8, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 504 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 110.775685050971, 'increment': 9, 'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 518 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 112.201845430196, 'increment': 10, 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 534 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 113.646366638572, 'increment': 11, 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 549 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 115.109485059084, 'increment': 12, 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 566 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 116.591440117983, 'increment': 13, 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 585 negative eigenvalues.', 
    'jobName': 'Job-HounyComb'})
mdb.jobs['Job-HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 118.09247432397, 'increment': 14, 'jobName': 'Job-HounyComb'})
mdb.models['Model'].steps['Step-1'].setValues(maxEigen=None, minEigen=100.0)
del mdb.jobs['Job-HounyComb']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='HounyComb', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\HounyComb.odb', 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4596, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STEP, {'stepName': 'Frequency extraction', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'HounyComb', 'memory': 1393.0})
mdb.jobs['HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 136.0, 
    'phase': STANDARD_PHASE, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'HounyComb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['HounyComb']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STEP, {
    'stepName': 'DRIVE 100 TO 1000 HZ, 5 Hz Incs, LINEAR FREQUENCY SCALE', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'HounyComb', 'memory': 2698.0})
mdb.jobs['HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 376.0, 
    'phase': STANDARD_PHASE, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 409 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 100.0, 'increment': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 416 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 101.287430882119, 'increment': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 428 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 102.591436547001, 'increment': 3, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 439 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 103.912230383517, 'increment': 4, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 452 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 105.250028527773, 'increment': 5, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 465 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 106.605049898479, 'increment': 6, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 479 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 107.977516232771, 'increment': 7, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 490 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 109.367652122497, 'increment': 8, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 504 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 110.775685050971, 'increment': 9, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 518 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 112.201845430196, 'increment': 10, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 534 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 113.646366638572, 'increment': 11, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 549 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 115.109485059084, 'increment': 12, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 566 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 116.591440117983, 'increment': 13, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 585 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 118.09247432397, 'increment': 14, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 603 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'HounyComb'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF, bulkTable=((1000000.0, ), ))
mdb.models['Model'].materials['PLA'].elastic.setValues(table=((12000000000.0, 
    0.3), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].Material(name='Material-Air')
mdb.models['Model'].materials['Material-Air'].Density(table=((1.2, ), ))
mdb.models['Model'].materials['Material-Air'].AcousticMedium(
    acousticVolumetricDrag=OFF, bulkTable=((141179.0, ), ))
mdb.models['Model'].HomogeneousSolidSection(material='Material-Air', name=
    'Section-3', thickness=None)
mdb.models['Model'].parts['GHS-New2'].Set(cells=
    mdb.models['Model'].parts['GHS-New2'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-3')
mdb.models['Model'].parts['GHS-New2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model'].parts['GHS-New2'].sets['Set-3'], sectionName=
    'Section-3', thicknessAssignment=FROM_SECTION)
mdb.models['Model'].rootAssembly.regenerate()
mdb.models['Model'].rootAssembly.Set(faces=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].faces.getSequenceFromMask(
    ('[#1 #c000000 ]', ), ), name='Set-Back-Circle')
mdb.models['Model'].rootAssembly.Set(faces=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].faces.getSequenceFromMask(
    ('[#3 #c000000 ]', ), ), name='Set-Back-Circle')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:7 #fc00000 #0:2 #f0000 #0 #fc0 #0:2', ' #fc0000 #0:2 #3c000 ]'), ), 
    name='Set-Houny-Comb')
mdb.models['Model'].steps['Step-1'].setValues(maxEigen=None)
mdb.models['Model'].boundaryConditions['BC-5'].setValues(u2=(1+0j), u3=(1+0j))
mdb.models['Model'].boundaryConditions['BC-5'].move('Step-2', 'Initial')
#* Cannot move a boundary condition created in a perturbation step.
mdb.models['Model'].DisplacementBC(amplitude=UNSET, createStepName='Step-2', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-6', region=mdb.models['Model'].rootAssembly.sets['Set-Back-Circle'], 
    u1=(1+0j), u2=(1+0j), u3=(1+0j), ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model'].boundaryConditions['BC-6'].setValues(amplitude=
    'STEPANISHEN_COX')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['HounyComb'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.saveAs(pathName='D:/temp/abaqus-acoustic.cae')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:4 #fc00 #0:2 #fc00000 #0:2 #3f0000 #0', 
    ' #3f000fc0 #0:2 #fc0000 #0:2 #3c000 ]'), ), name='Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:4 #fc00 #fc000 #0 #fc00000 #0 #c0000000', 
    ' #3f000f #0 #3f000fc0 #0:2 #fc0000 #0:2 #3c000 ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:4 #fc00 #fc000 #0 #fc00000 #fc000000 #c0000000', 
    ' #3f000f #0 #3f000fc0 #fc00 #0 #fc0000 #fc00000', 
    ' #fc000000 #3c000 #0 #fc ]'), ), name='Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #fc00 #fc000 #0 #fc00000 #fc000000', 
    ' #c003f000 #3f000f #fc #3f000fc0 #f000fc00 #fc003 #fc003f', 
    ' #fc00000 #fc003f00 #3c000 #0 #fc ]'), ), name='Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #fc00 #fc000 #0 #fc00000 #fc000000', 
    ' #c003f000 #3f000f #fc #3f000fc0 #f000fc00 #fc003 #fc003f', 
    ' #fc00000 #fc003f00 #3c000 #3f0000 #fc ]'), ), name='Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #fc00 #fc000 #fc003f #fc00000 #fc000000', 
    ' #c003f000 #3f000f #fc #3f000fc0 #f000fc00 #fc003 #fc003f', 
    ' #fc00000 #fc003f00 #c003c000 #3f000f #fc #fc0 ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #fc003 #fc003f #fc00000 #fc000000', 
    ' #c003f000 #3f000f #fc #3f000fc0 #f000fc00 #fc003 #fc003f', 
    ' #fc00000 #fc003f00 #c003c000 #3f000f #fc #fc0 ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #fc003 #fc003f #fc00000 #fc003f00', 
    ' #c003f000 #3f000f #fc #3f000fc0 #f000fc00 #fc003 #fc003f', 
    ' #fc00000 #fc003f00 #c003f000 #3f000f #3f000fc #fc0 ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #aa9fc003 #fc003f #fc00000 #feaa7f00', 
    ' #c003faa9 #3faa9f #aa9fc #3f000fc0 #faa9fc00 #aa9feaa7 #feaa7f', 
    ' #9fc00000 #fc003faa #c003faa9 #3f000f #3f000fc #fc0 ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #aa9fc003 #fc003f #fc00000 #feaa7f00', 
    ' #c003faa9 #aa7faa9f #aa9fe #7f000fc0 #faa9feaa #aa9feaa7 #a9feaa7f', 
    ' #9fc0000a #fc003faa #eaa7faa9 #3f000f #a7f000fc #fca ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #aa9fc003 #a9feaa7f #9fc0000a #feaa7faa', 
    ' #c003faa9 #aa7faa9f #aa9fe #7faa9fc0 #faa9feaa #aa9feaa7 #a9feaa7f', 
    ' #9fc0000a #fc003faa #eaa7faa9 #3f000f #a7f000fc #fca ]'), ), name=
    'Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #f000fc00 #aa9fc003 #a9feaa7f #9feaa40a #feaa7faa', 
    ' #c003faa9 #aa7faa9f #a40aa9fe #7faa9fea #faa9feaa #aa9feaa7 #a9feaa7f', 
    ' #9fc0000a #fc003faa #eaa7faa9 #3faa9f #a7f000fc #40000fca #2aa ]'), ), 
    name='Set-Houny-Comb')
mdb.models['Model'].rootAssembly.Set(edges=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].edges.getSequenceFromMask(
    ('[#0:3 #80000 #faa9fc00 #aa9feaa7 #a9feaa7f #9feaa40a #feaa7faa', 
    ' #eaa7faa9 #aa7faa9f #a40aa9fe #7faa9fea #faa9feaa #aa9feaa7 #a9feaa7f', 
    ' #9fc0000a #feaa7faa #eaa7faa9 #3faa9f #a7faa9fc #40000fea #2aa ]'), ), 
    name='Set-Houny-Comb')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2020', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.models['Model'].boundaryConditions['BC-6'].setValues(u2=UNSET, u3=UNSET)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.models['Model'].boundaryConditions['BC-6'].suppress()
mdb.models['Model'].boundaryConditions['BC-6'].resume()
mdb.models['Model'].boundaryConditions['BC-6'].setValues(region=
    mdb.models['Model'].rootAssembly.sets['Set-Houny-Comb'])
mdb.models['Model'].boundaryConditions['BC-6'].setValues(u1=UNSET, u2=(1+1j))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.models['Model'].materials['Material-2'].Elastic(table=((0.5, 0.9), ))
mdb.models['Model'].materials['Material-Air'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.models['Model'].materials['Material-Air'].Elastic(table=((0.1, 0.99), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 WARNINGS HAVE BEEN ISSUED REGARDING THE POISSON RATIO FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. NO MORE WARNING MESSAGES WILL BE PRINTED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.90000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.99000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.models['Model'].boundaryConditions['BC-6'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 WARNINGS HAVE BEEN ISSUED REGARDING THE POISSON RATIO FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. NO MORE WARNING MESSAGES WILL BE PRINTED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.90000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.99000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.99000 EXCEEDS 0.495 (THE BULK MODULUS OF -3.40136E-02 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 2.51256E-02) FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 WARNINGS HAVE BEEN ISSUED REGARDING THE POISSON RATIO FOR THE ELASTIC MATERIAL NAMED MATERIAL-AIR. NO MORE WARNING MESSAGES WILL BE PRINTED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.90000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.99000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
del mdb.models['Model'].materials['Material-2'].elastic
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
del mdb.models['Model'].materials['Material-Air'].density
del mdb.models['Model'].materials['Material-Air'].elastic
mdb.models['Model'].materials['Material-Air'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
del mdb.models['Model'].materials['Material-2'].density
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'DENSITY IS NOT DEFINED FOR ACOUSTIC MATERIAL MATERIAL-AIR.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-2 WOULD BE DEFINED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-AIR WOULD BE DEFINED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-2020.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-2020'})
del mdb.models['Model'].materials['Material-Air']
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF, bulkTable=((141179.0, ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model'].parts['GHS-New2'].sectionAssignments[2]
mdb.jobs['Job-2020'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2020']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-2 WOULD BE DEFINED.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\temp\\Job-2020.odb', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1976, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STEP, {'stepName': 'Frequency extraction', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2020', 'memory': 1393.0})
mdb.jobs['Job-2020']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(MINIMUM_MEMORY, {'minimum_memory': 136.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'Job-2020', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2020']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STEP, {
    'stepName': 'DRIVE 100 TO 1000 HZ, 5 Hz Incs, LINEAR FREQUENCY SCALE', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2020', 'memory': 2698.0})
mdb.jobs['Job-2020']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(MINIMUM_MEMORY, {'minimum_memory': 376.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 395 negative eigenvalues.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 100.0, 'increment': 1, 'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 404 negative eigenvalues.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 101.287430882119, 'increment': 2, 'jobName': 'Job-2020'})
mdb.models['Model'].boundaryConditions['BC-5'].setValues(u1=(100+90j), u2=(100+\
    90j), u3=(100+90j))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].boundaryConditions['BC-5'].move('Step-2', 'Initial')
#* Cannot move a boundary condition created in a perturbation step.
mdb.jobs['Job-2020']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 418 negative eigenvalues.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 102.591436547001, 'increment': 3, 'jobName': 'Job-2020'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2020']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 428 negative eigenvalues.', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2020'})
mdb.jobs['Job-2020']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'Job-2020'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].loads['CFORCE-1'].setValues(amplitude='STEPANISHEN_COX', 
    distributionType=UNIFORM, field='')
mdb.models['Model'].loads['CFORCE-2'].setValues(amplitude='STEPANISHEN_COX', 
    distributionType=UNIFORM, field='')
mdb.jobs['HounyComb'].submit(consistencyChecking=OFF)
mdb.jobs['HounyComb']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFC HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE INFR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODAL HISTORY OUTPUT REQUEST IS NOT SUPPORTED FOR THIS PROCEDURE TYPE', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFC IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFN IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST INFR IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PINF IS NOT AVAILABLE FOR THIS TYPE OF ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-2 WOULD BE DEFINED.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\HounyComb.odb', 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8260, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STEP, {'stepName': 'Frequency extraction', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'HounyComb', 'memory': 1393.0})
mdb.jobs['HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 136.0, 
    'phase': STANDARD_PHASE, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'HounyComb', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['HounyComb']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STEP, {
    'stepName': 'DRIVE 100 TO 1000 HZ, 5 Hz Incs, LINEAR FREQUENCY SCALE', 
    'phase': STANDARD_PHASE, 'stepId': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'HounyComb', 'memory': 2698.0})
mdb.jobs['HounyComb']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(MINIMUM_MEMORY, {'minimum_memory': 376.0, 
    'phase': STANDARD_PHASE, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 395 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 100.0, 'increment': 1, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 404 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 101.287430882119, 'increment': 2, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 418 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 102.591436547001, 'increment': 3, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 428 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 103.912230383517, 'increment': 4, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 441 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 105.250028527773, 'increment': 5, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 450 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 106.605049898479, 'increment': 6, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 463 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 107.977516232771, 'increment': 7, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 478 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 109.367652122497, 'increment': 8, 'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 490 negative eigenvalues.', 
    'jobName': 'HounyComb'})
mdb.jobs['HounyComb']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 110.775685050971, 'increment': 9, 'jobName': 'HounyComb'})
mdb.models['Model'].steps['Step-1'].setValues(maxEigen=1000.0, minEigen=200.0, 
    numEigen=1000)
mdb.models['Model'].steps['Step-2'].suppress()
mdb.models['Model'].steps['Step-3'].suppress()
del mdb.jobs['HounyComb']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-accoustoc_test', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-accoustoc_test'].submit(consistencyChecking=OFF)
mdb.jobs['Job-accoustoc_test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-2 WOULD BE DEFINED.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-accoustoc_test.odb', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2264, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(STEP, {
    'stepName': 'Frequency extraction', 'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Job-accoustoc_test', 
    'memory': 1312.0})
mdb.jobs['Job-accoustoc_test']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8118.0, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 131.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-accoustoc_test'})
mdb.models['Model'].steps['Step-1'].setValues(shift=1000.0)
mdb.models['Model'].loads['CFORCE-1'].resume()
#* Cannot resume while the step is still suppressed.  Resume the step first.
mdb.models['Model'].rootAssembly.Surface(name='m_Surf-1', side1Faces=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].faces.getSequenceFromMask(
    ('[#0 #4000000 ]', ), ))
mdb.models['Model'].rootAssembly.Surface(name='s_Surf-1', side1Faces=
    mdb.models['Model'].rootAssembly.instances['GHS-New2-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['Model'].Tie(adjust=ON, main=
    mdb.models['Model'].rootAssembly.surfaces['m_Surf-1'], name='Constraint-1', 
    positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Model'].rootAssembly.surfaces['s_Surf-1'], thickness=ON, 
    tieRotations=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].loads['Load-3'].resume()
#* Cannot resume while the step is still suppressed.  Resume the step first.
mdb.jobs['Job-accoustoc_test'].submit(consistencyChecking=OFF)
del mdb.jobs['Job-2020']
mdb.jobs['Job-accoustoc_test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE POR HAS NO COMPONENTS IN THIS ANALYSIS', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THIS TYPE OF ANALYSIS ONE WOULD NORMALLY EXPECT THAT A DENSITY FOR MATERIAL MATERIAL-2 WOULD BE DEFINED.', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-accoustoc_test.odb', 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9876, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepName': 'Frequency extraction', 'stepId': 1, 
    'jobName': 'Job-accoustoc_test'})
mdb.models['Model'].amplitudes['STEPANISHEN_COX'].setValues(data=((0.0, 
    -0.5552), (0.002, -0.5552), (0.004, -0.5324), (0.006, -0.5118), (0.008, 
    -0.494), (0.01, -0.4612), (0.012, -0.3709), (0.014, -0.2707), (0.016, 
    -0.1904), (0.018, -0.0651), (0.02, 0.088), (0.022, 0.1108), (0.024, 
    0.0736), (0.026, -0.0311), (0.028, -0.2107), (0.03, -0.4379), (0.032, 
    -0.6851), (0.034, -0.7869), (0.036, -0.7866), (0.038, -0.7713), (0.04, 
    -0.741), (0.042, -0.7457), (0.044, -0.8028), (0.046, -0.8525), (0.048, 
    -0.8794), (0.05, -0.9015), (0.052, -0.8837), (0.054, -0.8259), (0.056, 
    -0.7181), (0.058, -0.4978), (0.06, -0.2125), (0.062, 0.1106), (0.064, 
    0.1884), (0.066, 0.2562), (0.068, 0.279), (0.07, 0.2593), (0.072, 0.2022), 
    (0.074, 0.13), (0.076, 0.1582), (0.078, 0.1135), (0.08, 0.0913), (0.082, 
    0.1042), (0.084, 0.0395), (0.086, -0.1901), (0.088, -0.2873), (0.09, 
    -0.2316), (0.092, -0.0413), (0.094, 0.1315), (0.096, 0.2593), (0.098, 
    0.3222), (0.1, 0.3222), (0.102, 0.2695), (0.104, 0.2695), (0.106, 0.1315), 
    (0.108, -2.0), (0.11, -2.0), (0.112, -2.0), (0.114, -2.0), (0.116, -2.0), (
    0.118, -2.0), (0.12, 0.2841), (0.122, 0.2695), (0.124, 0.3148), (0.126, 
    0.4002), (0.128, 0.548), (0.13, 0.6158), (0.132, 0.379), (0.134, 0.052), (
    0.136, -0.3051), (0.138, -0.4773), (0.14, -0.5169), (0.142, -0.4666), (
    0.144, -0.3737), (0.146, -0.343), (0.148, -0.3877), (0.15, -0.4223), (
    0.152, -0.4395), (0.154, -0.4691), (0.156, -0.4288), (0.158, -0.3534), (
    0.16, -0.1678), (0.162, -0.1274), (0.164, -0.0946), (0.166, -0.0767), (
    0.168, -0.1014), (0.17, -0.111), (0.172, -0.0856), (0.174, 0.08), (0.176, 
    0.0929), (0.178, 0.0757), (0.18, 0.0386), (0.182, 0.0239), (0.184, 0.0193), 
    (0.186, -0.0328), (0.188, -0.2121), (0.19, -0.3567), (0.192, -0.4814), (
    0.194, -0.556), (0.196, -0.5831), (0.198, -0.5428), (0.2, -0.4075), (0.202, 
    0.1681), (0.204, 0.4909), (0.206, 0.6713), (0.208, 0.7666), (0.21, 0.7545), 
    (0.212, 0.6773), (0.214, 0.4727), (0.216, 0.3284), (0.218, 0.3288), (0.22, 
    0.3466), (0.222, 0.3395), (0.224, 0.3373), (0.226, 0.3501), (0.228, 
    0.3905), (0.23, 0.4837), (0.232, 0.4665), (0.234, 0.4069), (0.236, 0.3172), 
    (0.238, 0.2426), (0.24, 0.1929), (0.242, 0.1433), (0.244, 0.054), (0.246, 
    0.0568), (0.248, 0.1047), (0.25, 0.1775), (0.252, 0.2153), (0.254, 0.2732), 
    (0.256, 0.271), (0.258, -0.0658), (0.26, -0.2904), (0.262, -0.3401), (
    0.264, -0.3197), (0.266, -0.2719), (0.268, -0.2416), (0.27, -0.2462), (
    0.272, -0.4855), (0.274, -0.5752), (0.276, -0.6248), (0.278, -0.6745), (
    0.28, -0.7092), (0.282, -0.7238), (0.284, -0.7385), (0.286, -0.7254), (
    0.288, -0.6575), (0.29, -0.5697), (0.292, -0.4294), (0.294, -0.3366), (
    0.296, -0.2838), (0.298, -0.236), (0.3, -0.2304), (0.302, -0.295), (0.304, 
    -0.3672), (0.306, -0.4394), (0.308, -0.4516), (0.31, -0.4512), (0.312, 
    -0.3934), (0.314, -0.1429), (0.316, -0.0001), (0.318, 0.0927), (0.32, 
    0.168), (0.322, 0.1458), (0.324, 0.1186), (0.326, 0.0789), (0.328, 0.0595), 
    (0.33, 0.1198), (0.332, 0.1926), (0.334, 0.2179), (0.336, 0.2457), (0.338, 
    0.2435), (0.34, 0.2638), (0.342, 0.2894), (0.344, 0.3296), (0.346, 0.3849), 
    (0.348, 0.4552), (0.35, 0.5305), (0.352, 0.5682), (0.354, 0.5785), (0.356, 
    0.4191), (0.358, 0.2719), (0.36, 0.1947), (0.362, 0.1825), (0.364, 0.2002), 
    (0.366, 0.2455), (0.368, 0.2783), (0.37, 0.3338), (0.372, 0.3441), (0.374, 
    0.3618), (0.376, 0.3646), (0.378, 0.3349), (0.38, 0.3026), (0.382, 0.2104), 
    (0.384, 0.0034), (0.386, -0.1388), (0.388, -0.221), (0.39, -0.2308), (
    0.392, -0.1855), (0.394, -0.1003), (0.396, 0.0499), (0.398, 0.1304), (0.4, 
    0.1406), (0.402, 0.1734), (0.404, 0.1736), (0.406, 0.1713), (0.408, 
    0.1466), (0.41, 0.1093), (0.412, -0.1002), (0.414, -0.215), (0.416, 
    -0.2772), (0.418, -0.3145), (0.42, -0.3243), (0.422, -0.2966), (0.424, 
    -0.2389), (0.426, -0.066), (0.428, 0.0667), (0.43, 0.0819), (0.432, 
    0.0271), (0.434, -0.0776), (0.436, -0.2049), (0.438, -0.2447), (0.44, 
    -0.2843), (0.442, -0.2191), (0.444, -0.1265), (0.446, -0.0513), (0.448, 
    -0.2), (0.45, -0.2), (0.452, -0.2), (0.454, -0.2), (0.456, -0.2), (0.458, 
    -0.2), (0.46, -0.2), (0.462, -0.2), (0.464, -0.2), (0.466, -0.2), (0.468, 
    -0.2), (0.47, -0.2), (0.472, -0.2), (0.474, -0.2), (0.476, -0.2), (0.478, 
    -0.2), (0.48, -0.2), (0.482, -0.2), (0.484, -0.2), (0.486, -0.3), (0.488, 
    -0.3), (0.49, -0.3), (0.492, -0.3), (0.494, -0.3), (0.496, -0.3), (0.498, 
    -0.3), (0.5, -0.3), (0.502, -0.3), (0.504, -0.3), (0.506, -0.3), (0.508, 
    -0.3), (0.51, -0.3), (0.512, -0.3), (0.514, -0.3), (0.516, -0.3), (0.518, 
    -0.4), (0.52, -0.4), (0.522, -0.4), (0.524, -0.4), (0.526, -0.4), (0.528, 
    -0.4), (0.53, -0.4), (0.532, -0.4), (0.534, -0.4), (0.536, -0.4), (0.538, 
    -0.4), (0.54, -0.4), (0.542, -0.4), (0.544, -0.4), (0.546, -0.5), (0.548, 
    -0.5), (0.55, -0.5), (0.552, -0.5), (0.554, -0.5), (0.556, -0.5), (0.558, 
    -0.5), (0.56, -0.5), (0.562, -0.5), (0.564, -0.5), (0.566, -0.5), (0.568, 
    -0.5), (0.57, -0.5), (0.572, -0.5), (0.574, -0.5), (0.576, -0.5), (0.578, 
    -0.5), (0.58, -0.6), (0.582, -0.6), (0.584, -0.6), (0.586, -0.6), (0.588, 
    -0.6), (0.59, -0.6), (0.592, -0.6), (0.594, -0.6), (0.596, -0.6), (0.598, 
    -0.6), (0.6, -0.7), (0.602, -0.7), (0.604, -0.7), (0.606, -0.7), (0.608, 
    -0.7), (0.61, -0.7), (0.612, -0.7), (0.614, -0.7), (0.616, -0.7), (0.618, 
    -0.7), (0.62, -0.7), (0.622, -0.7), (0.624, -0.8), (0.626, -0.8), (0.628, 
    -0.8), (0.63, -0.8), (0.632, -0.8), (0.634, -0.8), (0.636, -0.8), (0.638, 
    -0.8), (0.64, -0.8), (0.642, -0.8), (0.644, -0.8), (0.646, -0.8), (0.648, 
    -0.8), (0.65, -0.8), (0.652, -0.8), (0.654, -0.8), (0.656, -0.8), (0.658, 
    -0.8), (0.66, -0.8), (0.662, -0.8), (0.664, -0.9), (0.666, -0.9), (0.668, 
    -0.9), (0.67, -0.9), (0.672, -0.9), (0.674, -0.9), (0.676, -0.9), (0.678, 
    -0.9), (0.68, -0.9), (0.682, -0.9), (0.684, -0.9), (0.686, -0.9), (0.688, 
    -0.9), (0.69, -0.9), (0.692, -0.9), (0.694, -0.9), (0.696, -1.0), (0.698, 
    -1.0), (0.7, -1.0), (0.702, -1.0), (0.704, -1.0), (0.706, -1.0), (0.708, 
    -1.0), (0.71, -1.0), (0.712, -1.0), (0.714, -1.0), (0.716, -1.0), (0.718, 
    -1.0), (0.72, -1.0), (0.722, -1.1), (0.724, -1.1), (0.726, -1.1), (0.728, 
    -1.1), (0.73, -1.1), (0.732, -1.1), (0.734, -1.1), (0.736, -1.1), (0.738, 
    -1.1), (0.74, -1.1), (0.742, -1.1), (0.744, -1.1), (0.746, -1.1), (0.748, 
    -1.1), (0.75, -1.1), (0.752, -1.1), (0.754, -1.1), (0.756, -1.1), (0.758, 
    -1.1), (0.76, -1.1), (0.762, -1.1), (0.764, -1.1), (0.766, -1.2), (0.768, 
    -1.2), (0.77, -1.2), (0.772, -1.2), (0.774, -1.2), (0.776, -1.2), (0.778, 
    -1.2), (0.78, -1.2), (0.782, -1.2), (0.784, -1.2), (0.786, -1.2), (0.788, 
    -1.2), (0.79, -1.2), (0.792, -1.2), (0.794, -1.2), (0.796, -1.2), (0.798, 
    -1.2), (0.8, -1.2), (0.802, -1.2), (0.804, -1.2), (0.806, -1.2), (0.808, 
    -1.2), (0.81, -1.2), (0.812, -1.2), (0.814, -1.2), (0.816, -1.2), (0.818, 
    -1.2), (0.82, -1.2), (0.822, -1.2), (0.824, -1.2), (0.826, -1.2), (0.828, 
    -1.2), (0.83, -1.2), (0.832, -1.2), (0.834, -1.2), (0.836, -1.2), (0.838, 
    -1.2), (0.84, -1.2), (0.842, -1.2), (0.844, -1.2), (0.846, -1.2), (0.848, 
    -1.2), (0.85, -1.2), (0.852, -1.2), (0.854, -1.2), (0.856, -1.2), (0.858, 
    -1.2), (0.86, -1.2), (0.862, -1.2), (0.864, -1.2), (0.866, -1.2), (0.868, 
    -1.2), (0.87, -1.2), (0.872, -1.2), (0.874, -1.2), (0.876, -1.2), (0.878, 
    -1.2), (0.88, -1.2), (0.882, -1.2), (0.884, -1.2), (0.886, -1.2), (0.888, 
    -1.2), (0.89, -1.2), (0.892, -1.2), (0.894, -1.2), (0.896, -1.2), (0.898, 
    -1.2), (0.9, -1.2), (0.902, -1.2), (0.904, -1.2), (0.906, -1.2), (0.908, 
    -1.2), (0.91, -1.2), (0.912, -1.2), (0.914, -1.2), (0.916, -1.2), (0.918, 
    -1.2), (0.92, -1.2), (0.922, -1.2), (0.924, -1.2), (0.926, -1.2), (0.928, 
    -1.2), (0.93, -1.2), (0.932, -1.2), (0.934, -1.2), (0.936, -1.2), (0.938, 
    -1.2), (0.94, -1.2), (0.942, -1.2), (0.944, -1.2), (0.946, -1.2), (0.948, 
    -1.2), (0.95, -1.1), (0.952, -1.1), (0.954, -1.1), (0.956, -1.1), (0.958, 
    -1.1), (0.96, -1.1), (0.962, -1.1), (0.964, -1.1), (0.966, -1.1), (0.968, 
    -1.1), (0.97, -1.1), (0.972, -1.1), (0.974, -1.1), (0.976, -1.1), (0.978, 
    -1.1), (0.98, -1.1), (0.982, -1.1), (0.984, -1.0), (0.986, -1.0), (0.988, 
    -1.0), (0.99, -1.0), (0.992, -1.0), (0.994, -1.0), (0.996, -1.0), (0.998, 
    -1.0), (1.0, -1.0), (1.002, -1.0), (1.004, -1.0), (1.006, -1.0), (1.008, 
    -1.0), (1.01, -1.0), (1.012, -0.9), (1.014, -0.9), (1.016, -0.9), (1.018, 
    -0.9), (1.02, -0.9), (1.022, -0.9), (1.024, -0.9), (1.026, -0.9), (1.028, 
    -0.9), (1.03, -0.9), (1.032, -0.9), (1.034, -0.9), (1.036, -0.9), (1.038, 
    -0.9), (1.04, -0.9), (1.042, -0.9), (1.044, -0.8), (1.046, -0.8), (1.048, 
    -0.8), (1.05, -0.8), (1.052, -0.8), (1.054, -0.8), (1.056, -0.8), (1.058, 
    -0.8), (1.06, -0.8), (1.062, -0.8), (1.064, -0.8), (1.066, -0.8), (1.068, 
    -0.8), (1.07, -0.8), (1.072, -0.8), (1.074, -0.8), (1.076, -0.7), (1.078, 
    -0.7), (1.08, -0.7), (1.082, -0.7), (1.084, -0.7), (1.086, -0.7), (1.088, 
    -0.7), (1.09, -0.7), (1.092, -0.7), (1.094, -0.7), (1.096, -0.7), (1.098, 
    -0.7), (1.1, -0.6), (1.102, -0.6), (1.104, -0.6), (1.106, -0.6), (1.108, 
    -0.6), (1.11, -0.6), (1.112, -0.6), (1.114, -0.6), (1.116, -0.6), (1.118, 
    -0.6), (1.12, -0.6), (1.122, -0.6), (1.124, -0.6), (1.126, -0.6), (1.128, 
    -0.6), (1.13, -0.6), (1.132, -0.5), (1.134, -0.5), (1.136, -0.5), (1.138, 
    -0.5), (1.14, -0.5), (1.142, -0.5), (1.144, -0.5), (1.146, -0.5), (1.148, 
    -0.5), (1.15, -0.5), (1.152, -0.5), (1.154, -0.4), (1.156, -0.4), (1.158, 
    -0.4), (1.16, -0.4), (1.162, -0.4), (1.164, -0.4), (1.166, -0.4), (1.168, 
    -0.4), (1.17, -0.4), (1.172, -0.4), (1.174, -0.4), (1.176, -0.4), (1.178, 
    -0.4), (1.18, -0.4), (1.182, -0.4), (1.184, -0.4), (1.186, -0.4), (1.188, 
    -0.4), (1.19, -0.3), (1.192, -0.3), (1.194, -0.3), (1.196, -0.3), (1.198, 
    -0.3), (1.2, -0.3), (1.202, -0.3), (1.204, -0.3), (1.206, -0.3), (1.208, 
    -0.3), (1.21, -0.3), (1.212, -0.3), (1.214, -0.3), (1.216, -0.3), (1.218, 
    -0.3), (1.22, -0.3), (1.222, -0.3), (1.224, -0.3), (1.226, -0.3), (1.228, 
    -0.3), (1.23, -0.3), (1.232, -0.3), (1.234, -0.3), (1.236, -0.3), (1.238, 
    -0.3), (1.24, -0.2), (1.242, -0.2), (1.244, -0.2), (1.246, -0.2), (1.248, 
    -0.2), (1.25, -0.2), (1.252, -0.2), (1.254, -0.2), (1.256, -0.2), (1.258, 
    -0.2), (1.26, -0.2), (1.262, -0.2), (1.264, -0.2), (1.266, -0.2), (1.268, 
    -0.2), (1.27, -0.2), (1.272, -0.2), (1.274, -0.2), (1.276, -0.2), (1.278, 
    -0.1), (1.28, -0.1), (1.282, -0.1), (1.284, -0.1), (1.286, -0.1), (1.288, 
    -0.1), (1.29, -0.1), (1.292, -0.1), (1.294, -0.1), (1.296, -0.1), (1.298, 
    -0.1), (1.3, -0.1), (1.302, -0.1), (1.304, -0.1), (1.306, -0.1), (1.308, 
    -0.1), (1.31, -0.1), (1.312, -0.1), (1.314, -0.1), (1.316, -0.1), (1.318, 
    -0.1), (1.32, -0.1), (1.322, -0.1), (1.324, -0.1), (1.326, -0.1), (1.328, 
    -0.1), (1.33, -0.1), (1.332, -0.1), (1.334, -0.1), (1.336, -0.1), (1.338, 
    -0.1), (1.34, -0.1), (1.342, -0.1), (1.344, -0.1), (1.346, -0.1), (1.348, 
    -0.1), (1.35, -0.1763), (1.352, -0.1318), (1.354, -0.0822), (1.356, 
    -0.0027), (1.358, 0.0318), (1.36, 0.0763), (1.362, 0.0684), (1.364, 
    0.0624), (1.366, 0.062), (1.368, 0.0815), (1.37, 0.0885), (1.372, 0.1131), 
    (1.374, 0.1276), (1.376, 0.1347), (1.378, 0.1163), (1.38, 0.0883), (1.382, 
    0.0379), (1.384, -0.025), (1.386, -0.128), (1.388, -0.1234), (1.39, 
    -0.1314), (1.392, -0.1547), (1.394, -0.1627), (1.396, -0.1731), (1.398, 
    -0.166), (1.4, -0.1515), (1.402, -0.1194), (1.404, -0.0873), (1.406, 
    -0.0082), (1.408, 0.0164), (1.41, 0.0435), (1.412, 0.0606), (1.414, 
    0.0576), (1.416, 0.0447), (1.418, 0.0168), (1.42, -0.049), (1.422, 
    -0.0819), (1.424, -0.1147), (1.426, -0.1651), (1.428, -0.1555), (1.43, 
    -0.1434), (1.432, -0.0988), (1.434, 0.0229), (1.436, 0.085), (1.438, 
    0.0946), (1.44, 0.0567), (1.442, 0.0289), (1.444, -0.014), (1.446, 
    -0.0394), (1.448, 0.0224), (1.45, 0.0595), (1.452, 0.0966), (1.454, 
    0.1163), (1.456, 0.0984), (1.458, 0.0806), (1.46, 0.0577), (1.462, 0.017), 
    (1.464, 0.0242), (1.466, 0.0313), (1.468, 0.041), (1.47, 0.0556), (1.472, 
    0.0728), (1.474, 0.09), (1.476, 0.1068), (1.478, 0.089), (1.48, 0.0661), (
    1.482, 0.0383), (1.484, 0.023), (1.486, 0.0077), (1.488, 0.0023), (1.49, 
    -0.0458), (1.492, -0.0811), (1.494, -0.1039), (1.496, -0.1142), (1.498, 
    -0.0945), (1.5, -0.0648), (1.502, -0.0177), (1.504, 0.0318), (1.506, 
    -0.006), (1.508, -0.0238), (1.51, -0.0041), (1.512, 0.0156), (1.514, 
    0.0453), (1.516, 0.065), (1.518, 0.0569), (1.52, 0.0491), (1.522, 0.0389), 
    (1.524, 0.0536), (1.526, 0.0883), (1.528, 0.108), (1.53, 0.1353), (1.532, 
    0.1422), (1.534, 0.1295), (1.536, 0.1267), (1.538, 0.119), (1.54, 0.1062), 
    (1.542, 0.0785), (1.544, 0.0732), (1.546, 0.1202), (1.548, 0.1599), (1.55, 
    0.1847), (1.552, 0.2044), (1.554, 0.2167), (1.556, 0.209), (1.558, 0.2013), 
    (1.56, 0.0933), (1.562, 0.0631), (1.564, 0.0703), (1.566, 0.0751), (1.568, 
    0.0624), (1.57, 0.0397), (1.572, 0.002), (1.574, -0.0434), (1.576, 
    -0.0511), (1.578, -0.0513), (1.58, -0.0191), (1.582, -0.0093), (1.584, 
    0.0155), (1.586, 0.0253), (1.588, 0.0349), (1.59, 0.0248), (1.592, 
    -0.0104), (1.594, -0.0381), (1.596, -0.0658), (1.598, -0.0835), (1.6, 
    -0.0786), (1.602, -0.089), (1.604, -0.1442), (1.606, -0.1568), (1.608, 
    -0.1995), (1.61, -0.2396), (1.612, -0.2698), (1.614, -0.2875), (1.616, 
    -0.2653), (1.618, -0.2554), (1.62, -0.2156), (1.622, -0.1658), (1.624, 
    -0.1184), (1.626, -0.0836), (1.628, -0.0212), (1.63, 0.0585), (1.632, 
    0.0733), (1.634, 0.0807), (1.636, 0.0781), (1.638, 0.0704), (1.64, 0.0478), 
    (1.642, 0.0077), (1.644, -0.04), (1.646, -0.0252), (1.648, -0.0153), (1.65, 
    -0.0054), (1.652, 0.022), (1.654, 0.0344), (1.656, 0.0367), (1.658, 
    0.0515), (1.66, 0.0714), (1.662, 0.0838), (1.664, 0.0887), (1.666, 0.1036), 
    (1.668, 0.0985), (1.67, 0.0934), (1.672, 0.0658), (1.674, 0.0457), (1.676, 
    0.0531), (1.678, 0.068), (1.68, 0.0829), (1.682, 0.0954), (1.684, 0.1078), 
    (1.686, 0.1051), (1.688, 0.0851), (1.69, 0.07), (1.692, 0.0599), (1.694, 
    0.0449), (1.696, 0.0298), (1.698, 0.0298), (1.7, 0.0472), (1.702, 0.0521), 
    (1.704, 0.0696), (1.706, 0.0845), (1.708, 0.0919), (1.71, 0.0919), (1.712, 
    0.1069), (1.714, 0.1168), (1.716, 0.1367), (1.718, 0.1517), (1.72, 0.1667), 
    (1.722, 0.1716), (1.724, 0.1816), (1.726, 0.1516), (1.728, 0.0716), (1.73, 
    0.0391), (1.732, 0.039), (1.734, 0.064), (1.736, 0.0815), (1.738, 0.089), (
    1.74, 0.0815), (1.742, 0.0115), (1.744, -0.046), (1.746, -0.076), (1.748, 
    -0.0585), (1.75, -0.046), (1.752, -0.036), (1.754, -0.0285), (1.756, 
    -0.041), (1.758, -0.061), (1.76, -0.086), (1.762, -0.1009), (1.764, 
    -0.0859), (1.766, -0.0634), (1.768, -0.0359), (1.77, 0.0216), (1.772, 
    0.0542), (1.774, 0.0667), (1.776, 0.0767), (1.778, 0.0693), (1.78, 0.0568), 
    (1.782, 0.0318), (1.784, 0.0619), (1.786, 0.082), (1.788, 0.087), (1.79, 
    0.0895), (1.792, 0.0796), (1.794, 0.0646), (1.796, 0.0397), (1.798, 
    0.0373), (1.8, 0.0974), (1.802, 0.1349), (1.804, 0.1525), (1.806, 0.1375), 
    (1.808, 0.1126), (1.81, 0.0977), (1.812, 0.0603), (1.814, 0.0829), (1.816, 
    0.0929), (1.818, 0.123), (1.82, 0.1256), (1.822, 0.1332), (1.824, 0.1157), 
    (1.826, 0.0934), (1.828, 0.076), (1.83, 0.0461), (1.832, 0.0037), (1.834, 
    -0.0237), (1.836, -0.0586), (1.838, -0.0785), (1.84, -0.1233), (1.842, 
    -0.1182), (1.844, -0.1156), (1.846, -0.113), (1.848, -0.1054), (1.85, 
    -0.1053), (1.852, -0.1077), (1.854, -0.14), (1.856, -0.1449), (1.858, 
    -0.1523), (1.86, -0.1472), (1.862, -0.1296), (1.864, -0.0995), (1.866, 
    -0.0818), (1.868, -0.0316), (1.87, -0.0015), (1.872, -0.0089), (1.874, 
    -0.0062), (1.876, -0.0186), (1.878, -0.0535), (1.88, -0.0708), (1.882, 
    -0.1131), (1.884, -0.1104), (1.886, -0.0778), (1.888, -0.0377), (1.89, 
    -0.025), (1.892, 0.0076), (1.894, 0.0327), (1.896, 0.093), (1.898, 0.1156), 
    (1.9, 0.1358), (1.902, 0.1459), (1.904, 0.1386), (1.906, 0.1262), (1.908, 
    0.1089), (1.91, 0.1217), (1.912, 0.1469), (1.914, 0.1745), (1.916, 0.1822), 
    (1.918, 0.2223), (1.92, 0.2525), (1.922, 0.2851), (1.924, 0.298), (1.926, 
    0.2881), (1.928, 0.2608), (1.93, 0.2485), (1.932, 0.2312), (1.934, 0.2088), 
    (1.936, 0.194), (1.938, 0.1568), (1.94, 0.132), (1.942, 0.1172), (1.944, 
    0.0999), (1.946, 0.0751), (1.948, 0.0653), (1.95, 0.0804), (1.952, 0.1208), 
    (1.954, 0.136), (1.956, 0.1462), (1.958, 0.1489), (1.96, 0.1416), (1.962, 
    0.1168), (1.964, 0.1094), (1.966, 0.0948), (1.968, 0.0775), (1.97, 0.0777), 
    (1.972, 0.0654), (1.974, 0.0306), (1.976, -0.0342), (1.978, -0.064), (1.98, 
    -0.036), (1.982, -0.0309), (1.984, -0.0257), (1.986, -0.0379), (1.988, 
    -0.0577), (1.99, -0.0875), (1.992, -0.0898), (1.994, -0.0819), (1.996, 
    -0.0767), (1.998, -0.069), (2.0, -0.0538), (2.002, -0.0311), (2.004, 
    -0.0258), (2.006, -0.0031), (2.008, 0.0173), (2.01, 0.025), (2.012, 
    0.0178), (2.014, 0.0005), (2.016, -0.0318), (2.018, -0.0366), (2.02, 
    -0.0489), (2.022, -0.0609), (2.024, -0.0782), (2.026, -0.1129), (2.028, 
    -0.1427), (2.03, -0.165), (2.032, -0.2048), (2.034, -0.2545), (2.036, 
    -0.2641), (2.038, -0.2463), (2.04, -0.2411), (2.042, -0.2084), (2.044, 
    -0.1856), (2.046, -0.1604), (2.048, -0.1727), (2.05, -0.1822), (2.052, 
    -0.1919), (2.054, -0.2017), (2.056, -0.204), (2.058, -0.1887), (2.06, 
    -0.1835), (2.062, -0.1733), (2.064, -0.1203), (2.066, -0.1025), (2.068, 
    -0.0873), (2.07, -0.0846), (2.072, -0.0868), (2.074, -0.0916), (2.076, 
    -0.0813), (2.078, -0.0708), (2.08, -0.0556), (2.082, -0.0353), (2.084, 
    -0.0126), (2.086, 0.0027), (2.088, 0.0229), (2.09, 0.0407), (2.092, 
    0.0687), (2.094, 0.0714), (2.096, 0.0792), (2.098, 0.0769), (2.1, 0.0697), 
    (2.102, 0.0524), (2.104, 0.0327), (2.106, -0.0193), (2.108, -0.0415), (
    2.11, -0.0363), (2.112, -0.041), (2.114, -0.0283), (2.116, -0.0055), (
    2.118, -0.0153), (2.12, -0.0372), (2.122, -0.0445), (2.124, -0.0692), (
    2.126, -0.0589), (2.128, -0.0437), (2.13, -0.0184), (2.132, -0.0007), (
    2.134, 0.0323), (2.136, 0.0626), (2.138, 0.0853), (2.14, 0.0981), (2.142, 
    0.1159), (2.144, 0.1386), (2.146, 0.1514), (2.148, 0.1894), (2.15, 0.2147), 
    (2.152, 0.2149), (2.154, 0.2252), (2.156, 0.218), (2.158, 0.2207), (2.16, 
    0.2135), (2.162, 0.184), (2.164, 0.1743), (2.166, 0.1621), (2.168, 0.1448), 
    (2.17, 0.1326), (2.172, 0.1304), (2.174, 0.1081), (2.176, 0.0587), (2.178, 
    0.0339), (2.18, 0.0167), (2.182, -0.0105), (2.184, -0.0278), (2.186, 
    -0.0425), (2.188, -0.0722), (2.19, -0.1117), (2.192, -0.1214), (2.194, 
    -0.1261), (2.196, -0.1184), (2.198, -0.1156), (2.2, -0.1128), (2.202, 
    -0.1026), (2.204, -0.1095), (2.206, -0.1168), (2.208, -0.129), (2.21, 
    -0.1387), (2.212, -0.1285), (2.214, -0.1257), (2.216, -0.1254), (2.218, 
    -0.0999), (2.22, -0.1121), (2.222, -0.1243), (2.224, -0.1366), (2.226, 
    -0.1538), (2.228, -0.1585), (2.23, -0.1683), (2.232, -0.1528), (2.234, 
    -0.15), (2.236, -0.1472), (2.238, -0.1394), (2.24, -0.1342), (2.242, 
    -0.1339), (2.244, -0.1362), (2.246, -0.1556), (2.248, -0.1554), (2.25, 
    -0.1501), (2.252, -0.1223), (2.254, -0.1046), (2.256, -0.0793), (2.258, 
    -0.0666), (2.26, -0.071), (2.262, -0.0658), (2.264, -0.048), (2.266, 
    -0.0327), (2.268, -0.0175), (2.27, -0.0122), (2.272, 0.0055), (2.274, 
    0.0261), (2.276, 0.0363), (2.278, 0.0466), (2.28, 0.0393), (2.282, 0.0371), 
    (2.284, 0.0224), (2.286, 0.0201), (2.288, -0.0068), (2.29, 0.0059), (2.292, 
    0.0237), (2.294, 0.0414), (2.296, 0.0517), (2.298, 0.0594), (2.3, 0.0847), 
    (2.302, 0.0702), (2.304, 0.0555), (2.306, 0.0407), (2.308, 0.041), (2.31, 
    0.0637), (2.312, 0.0765), (2.314, 0.0892), (2.316, 0.0873), (2.318, 0.095), 
    (2.32, 0.0878), (2.322, 0.0705), (2.324, 0.0483), (2.326, 0.021), (2.328, 
    0.0163), (2.33, -0.0132), (2.332, -0.0205), (2.334, -0.0127), (2.336, 
    -0.0125), (2.338, -0.0122), (2.34, -0.002), (2.342, 0.0008), (2.344, 
    0.0038), (2.346, 0.0115), (2.348, 0.0168), (2.35, 0.0195), (2.352, 0.0047), 
    (2.354, -0.0175), (2.356, -0.0348), (2.358, -0.0493), (2.36, -0.064), (
    2.362, -0.0613), (2.364, -0.0585), (2.366, -0.0833), (2.368, -0.0856), (
    2.37, -0.0953), (2.372, -0.1348), (2.374, -0.1446), (2.376, -0.1519), (
    2.378, -0.1641), (2.38, -0.1739), (2.382, -0.1736), (2.384, -0.1709), (
    2.386, -0.1629), (2.388, -0.1652), (2.39, -0.1425), (2.392, -0.1298), (
    2.394, -0.097), (2.396, -0.0843), (2.398, -0.0716), (2.4, -0.0611), (2.402, 
    -0.0509), (2.404, -0.0607), (2.406, -0.0505), (2.408, -0.0577), (2.41, 
    -0.0675), (2.412, -0.0723), (2.414, -0.0818), (2.416, -0.0716), (2.418, 
    -0.0589), (2.42, -0.0512), (2.422, -0.0585), (2.424, -0.0683), (2.426, 
    -0.1055), (2.428, -0.1451), (2.43, -0.1599), (2.432, -0.1472), (2.434, 
    -0.1519), (2.436, -0.1392), (2.438, -0.1065), (2.44, -0.0763), (2.442, 
    -0.0409), (2.444, -0.0382), (2.446, -0.028), (2.448, -0.0303), (2.45, 
    -0.0101), (2.452, -0.0049), (2.454, 0.0153), (2.456, 0.0307), (2.458, 
    0.0259), (2.46, 0.0236), (2.462, 0.0113), (2.464, 0.0165), (2.466, 0.0117), 
    (2.468, -0.0056), (2.47, -0.0727), (2.472, -0.1), (2.474, -0.0873), (2.476, 
    -0.0746), (2.478, -0.0594), (2.48, -0.0517), (2.482, -0.0415), (2.484, 
    -0.0187), (2.486, -0.001), (2.488, 0.0117), (2.49, 0.0369), (2.492, 
    0.0546), (2.494, 0.0748), (2.496, 0.0675), (2.498, 0.0853), (2.5, 0.0853), 
    (2.502, 2.0), (2.504, -5.0)), smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.jobs['Job-accoustoc_test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 1312.0, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8118.0, 
    'jobName': 'Job-accoustoc_test'})
mdb.jobs['Job-accoustoc_test']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 131.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-accoustoc_test'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF, bulkTable=((2070000000.0, ), ))
mdb.models['Model'].materials['Material-2'].Density(table=((1000.0, ), ))
mdb.models['Model'].materials['PLA'].density.setValues(table=((7800.0, ), ))
mdb.models['Model'].materials['PLA'].elastic.setValues(table=((206800000000.0, 
    0.3), ))
mdb.models['Model'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-27.5, 8.75))
mdb.models['Model'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model'].parts['Part-2'].BaseShellExtrude(depth=0.2, sketch=
    mdb.models['Model'].sketches['__profile__'])
del mdb.models['Model'].sketches['__profile__']
mdb.models['Model'].rootAssembly.Instance(dependent=ON, name='Part-2-1', part=
    mdb.models['Model'].parts['Part-2'])
mdb.models['Model'].rootAssembly.rotate(angle=90.0, axisDirection=(12.0, 0.0, 
    0.0), axisPoint=(-8.0, 27.66, 0.0), instanceList=('Part-2-1', ))
mdb.models['Model'].rootAssembly.rotate(angle=180.0, axisDirection=(31.5, 
    -5.071949, 4.091354), axisPoint=(-27.5, 27.66, -18.91), instanceList=(
    'Part-2-1', ))
mdb.models['Model'].rootAssembly.rotate(angle=-90.0, axisDirection=(7.438237, 
    -0.190055, 18.901978), axisPoint=(-27.438237, 27.850055, -18.901978), 
    instanceList=('Part-2-1', ))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (-27.225522, 7.274308, -1.156333))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (34.851044, -16.59111, -0.060799))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (-2.5, -2.515872, -23.182584))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (2.5, -0.988878, 20.075353))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (12.0, -54.928051, -14.818646))
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (11.812715, 37.559548, 8.044987))
mdb.models['Model'].parts.changeKey(fromName='Part-2', toName='Shell')
del mdb.models['Model'].sections['Section-1']
del mdb.models['Model'].sections['Section-2']
del mdb.models['Model'].sections['Section-3']
mdb.models['Model'].HomogeneousSolidSection(material='Material-2', name=
    'section1', thickness=None)
mdb.models['Model'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='PLA', name='Section-2', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.0254, thicknessField=''
    , thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model'].parts['Shell'].Set(faces=
    mdb.models['Model'].parts['Shell'].faces.getSequenceFromMask(('[#1 ]', ), )
    , name='Set-1')
mdb.models['Model'].parts['Shell'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=SINGLE_VALUE, region=
    mdb.models['Model'].parts['Shell'].sets['Set-1'], sectionName='Section-2', 
    thicknessAssignment=FROM_SECTION)
del mdb.models['Model'].parts['GHS-New2'].sectionAssignments[0]
mdb.models['Model'].parts['GHS-New2'].sectionAssignments[0].setValues(
    sectionName='section1')
mdb.models['Model'].rootAssembly.regenerate()
del mdb.models['Model'].steps['Step-3']
del mdb.models['Model'].steps['Step-2']
del mdb.models['Model'].steps['Step-1']
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((200.0, 500.0, 93, 
    1.0), ), name='Step-1', previous='Initial', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((500.0, 800.0, 120, 
    1.0), ), name='Step-2', previous='Step-1', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((800.0, 1100.0, 180, 
    1.0), ), name='Step-3', previous='Step-2')
mdb.models['Model'].steps['Step-3'].setValues(scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((1100.0, 1400.0, 200, 
    1.0), ), name='Step-4', previous='Step-3', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((1400.0, 1700.0, 250, 
    1.0), ), name='Step-5', previous='Step-4', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((1700.0, 2000.0, 300, 
    1.0), ), name='Step-6', previous='Step-5')
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((2000.0, 2300.0, 330, 
    1.0), ), name='Step-7', previous='Step-6', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((2300.0, 2600.0, 380, 
    1.0), ), name='Step-8', previous='Step-7', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((2600.0, 2900.0, 400, 
    1.0), ), name='Step-9', previous='Step-8', scale=LINEAR)
mdb.models['Model'].SteadyStateDirectStep(frequencyRange=((2600.0, 2900.0, 400, 
    1.0), ), name='Step-10', previous='Step-9')
mdb.models['Model'].FrequencyStep(description='freq', maxEigen=3200.0, 
    minEigen=200.0, name='Step-11', numEigen=200, previous='Step-10', shift=
    200.0)
mdb.models['Model'].boundaryConditions['BC-3'].setValues(u1=UNSET, ur3=SET)
mdb.models['Model'].boundaryConditions['BC-4'].setValues(u1=SET, ur3=UNSET)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-accoustoc_test']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-Acoustic', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['Model'].parts['Shell'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=8.2)
mdb.models['Model'].parts['Shell'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model'].rootAssembly.regenerate()
mdb.jobs['Job-Acoustic'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Acoustic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '18961 elements are missing elastic property reference. The elements have been identified in element set ErrElemMissingElasticPropRef.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-Acoustic.odb', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.models['Model'].materials['Material-2'].Elastic(table=((2200000000.0, 
    0.55), ))
mdb.jobs['Job-Acoustic'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Acoustic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.55000 EXCEEDS 0.495 (THE BULK MODULUS OF -7.33333E+09 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.09677E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.55000 EXCEEDS 0.495 (THE BULK MODULUS OF -7.33333E+09 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.09677E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.55000 EXCEEDS 0.495 (THE BULK MODULUS OF -7.33333E+09 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.09677E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.55000 EXCEEDS 0.495 (THE BULK MODULUS OF -7.33333E+09 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.09677E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.55000 EXCEEDS 0.495 (THE BULK MODULUS OF -7.33333E+09 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.09677E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 WARNINGS HAVE BEEN ISSUED REGARDING THE POISSON RATIO FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. NO MORE WARNING MESSAGES WILL BE PRINTED.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'AN INVALID POISSONS RATIO VALUE OF 0.55000 HAS BEEN SPECIFIED. THE POISSONS RATIO MUST BE LESS THAN THE VALUE OF .5', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-Acoustic.odb', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.models['Model'].materials['Material-2'].elastic.setValues(table=((
    2200000000.0, 0.5), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-Acoustic'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Acoustic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.50000 EXCEEDS 0.495 (THE BULK MODULUS OF 3.66667E+15 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.33333E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.50000 EXCEEDS 0.495 (THE BULK MODULUS OF 3.66667E+15 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.33333E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.50000 EXCEEDS 0.495 (THE BULK MODULUS OF 3.66667E+15 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.33333E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.50000 EXCEEDS 0.495 (THE BULK MODULUS OF 3.66667E+15 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.33333E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE POISSON RATIO OF 0.50000 EXCEEDS 0.495 (THE BULK MODULUS OF 3.66667E+15 EXCEEDS 100 TIMES THE SHEAR MODULUS OF 7.33333E+08) FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. HOWEVER, A HYBRID TYPE ELEMENT IS NOT USED. THIS MAY CAUSE CONVERGENCE PROBLEMS. IT IS RECOMMENDED THAT YOU CHANGE THE ELEMENT TYPE TO A HYBRID ELEMENT; HOWEVER, YOU CAN ALSO CONVERTTHIS ERROR MESSAGE TO A WARNING MESSAGEBY SETTING THE ENVIRONMENT VARIABLE NONHYBRID_INCOMPRESS TO WARNING OR BY ADDING *DIAGNOSTICS, NONHYBRID=WARNING TO THE INPUT FILE (NOT RECOMMENDED).', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '5 WARNINGS HAVE BEEN ISSUED REGARDING THE POISSON RATIO FOR THE ELASTIC MATERIAL NAMED MATERIAL-2. NO MORE WARNING MESSAGES WILL BE PRINTED.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-Acoustic.odb', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-Acoustic.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-Acoustic'})
mdb.models['Model'].materials['Material-2'].acousticMedium.setValues(
    acousticVolumetricDrag=OFF)
mdb.models['Model'].materials['Material-2'].elastic.setValues(table=((
    2200000000.0, 0.43), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-Acoustic'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Acoustic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-Acoustic.odb', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8288, 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-Acoustic', 'memory': 3542.0})
mdb.jobs['Job-Acoustic']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(MINIMUM_MEMORY, {'minimum_memory': 371.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6239 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 200.0, 'increment': 1, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6394 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 203.260869565217, 'increment': 2, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6556 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 206.521739130435, 'increment': 3, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6715 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 209.782608695652, 'increment': 4, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6870 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 213.04347826087, 'increment': 5, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7025 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 216.304347826087, 'increment': 6, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7187 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 219.565217391304, 'increment': 7, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7350 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 222.826086956522, 'increment': 8, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7516 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 226.086956521739, 'increment': 9, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7682 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 229.347826086957, 'increment': 10, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7844 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 232.608695652174, 'increment': 11, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8007 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 235.869565217391, 'increment': 12, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8174 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 239.130434782609, 'increment': 13, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8339 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 242.391304347826, 'increment': 14, 'jobName': 'Job-Acoustic'})
del mdb.models['Model'].steps['Step-11']
mdb.jobs['Job-Acoustic']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8506 negative eigenvalues.', 
    'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'Job-Acoustic'})
mdb.jobs['Job-Acoustic']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 1, 
    'frequency': 245.652173913043, 'increment': 15, 'jobName': 'Job-Acoustic'})
mdb.models['Model'].FrequencyStep(description='freq', maxEigen=3200.0, 
    minEigen=200.0, name='Step-11', numEigen=200, previous='Initial', shift=
    200.0)
del mdb.jobs['Job-Acoustic']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-Acoustic-Freq', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-Acoustic-Freq'].submit(consistencyChecking=OFF)
mdb.jobs['Job-Acoustic-Freq']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-Acoustic-Freq.odb', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 12096, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STEP, {'stepName': 'freq', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Job-Acoustic-Freq', 'memory': 1404.0})
mdb.jobs['Job-Acoustic-Freq']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8118.0, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 141.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE MAY BE MORE EIGENVALUES IN THE SPECIFIED RANGE THAN REQUESTED. IF THE NUMBER OF EIGENVALUES WAS NOT EXPLICITLY REQUESTED, SPECIFY THE MAXIMUM NUMBER OF EIGENVALUES TO BE EXTRACTED', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 20, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 21, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 22, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 23, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 24, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 25, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 26, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 27, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 28, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 29, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 30, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 31, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 32, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 33, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 34, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 35, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 36, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 37, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 38, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 39, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 40, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 41, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 42, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 43, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 44, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 45, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 46, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 47, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 48, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 49, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 50, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 51, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 52, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 53, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 54, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 55, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 56, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 57, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 58, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 59, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 60, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 61, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 62, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 63, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 64, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 65, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 66, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 67, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 68, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 69, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 70, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 71, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 72, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 73, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 74, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 75, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 76, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 77, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 78, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 79, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 80, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 81, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 82, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 83, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 84, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 85, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 86, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 87, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 88, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 89, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 90, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 91, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 92, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 93, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 94, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 95, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 96, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 97, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 98, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 99, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 100, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 101, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 102, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 103, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 104, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 105, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 106, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 107, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 108, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 109, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 110, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 111, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 112, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 113, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 114, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 115, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 116, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 117, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 118, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 119, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 120, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 121, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 122, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 123, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 124, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 125, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 126, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 127, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 128, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 129, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 130, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 131, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 132, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 133, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 134, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 135, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 136, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 137, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 138, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 139, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 140, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 141, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 142, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 143, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 144, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 145, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 146, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 147, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 148, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 149, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 150, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 151, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 152, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 153, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 154, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 155, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 156, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 157, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 158, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 159, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 160, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 161, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 162, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 163, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 164, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 165, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 166, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 167, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 168, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 169, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 170, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 171, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 172, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 173, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 174, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 175, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 176, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 177, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 178, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 179, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 180, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 181, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 182, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 183, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 184, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 185, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 186, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 187, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 188, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 189, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 190, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 191, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 192, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 193, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 194, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 195, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 196, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 197, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 198, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 199, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 200, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 1, 'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 
    'step': 1, 'jobName': 'Job-Acoustic-Freq', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-Acoustic-Freq']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Job-Acoustic-Freq', 'memory': 2727.0})
mdb.jobs['Job-Acoustic-Freq']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 8118.0, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 397.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6239 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 200.0, 'increment': 1, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6394 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 203.260869565217, 'increment': 2, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6556 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 206.521739130435, 'increment': 3, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6715 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 209.782608695652, 'increment': 4, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6870 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 213.04347826087, 'increment': 5, 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7025 negative eigenvalues.', 
    'jobName': 'Job-Acoustic-Freq'})
mdb.jobs['Job-Acoustic-Freq']._Message(STATUS, {'phase': STANDARD_PHASE, 
    'step': 2, 'frequency': 216.304347826087, 'increment': 6, 
    'jobName': 'Job-Acoustic-Freq'})
del mdb.jobs['Job-Acoustic-Freq']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-121212', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-121212'].submit(consistencyChecking=OFF)
mdb.jobs['Job-121212']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-121212.odb', 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11244, 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(STEP, {'stepName': 'freq', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-121212', 'memory': 1404.0})
mdb.jobs['Job-121212']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-121212'})
mdb.jobs['Job-121212']._Message(MINIMUM_MEMORY, {'minimum_memory': 141.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-121212'})
del mdb.jobs['Job-121212']
mdb.models['Model'].rootAssembly.translate(instanceList=('Part-2-1', ), vector=
    (-1.813655, 11.201362, 2.162252))
mdb.models['Model'].rootAssembly.rotate(angle=12.0, axisDirection=(-24.0, 0.0, 
    0.0), axisPoint=(4.0, -2.34, 30.0), instanceList=('Part-2-1', ))
mdb.models['Model'].rootAssembly.rotate(angle=20.0, axisDirection=(-2.2, 
    -1.765268, 7.683961), axisPoint=(4.0, 25.623489, -7.683961), instanceList=(
    'Part-2-1', ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-55555', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-55555'].submit(consistencyChecking=OFF)
mdb.jobs['Job-55555']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '112 nodes are common between the tied pair. no constraint is formed for these nodes. The nodes have been identified in node set WarnNodeCommonTiedPair.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*TIE BETWEEN SURFACE PAIR (ASSEMBLY_S_SURF-1,ASSEMBLY_M_SURF-1) IS REVERTED BACK TO TYPE NODE-TO-SURFACE. THIS CASE MAY HAPPEN IF TYPE SURFACE-TO-SURFACE CANNOT FIND NODES TO TIE TOGETHER OR IF DEFAULT ACOUSTIC-STRUCTURAL TIE IS SPECIFIED INVOLVING SHELLS. PLEASE CHECK THE SURFACE DEFINITIONS OR SPECIFY TYPE=SURFACE TO SURFACE FOR ACOUSTIC-STRUCTURAL TIE.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_S_SURF-1-ASSEMBLY_M_SURF-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1568 nodes are either missing intersection with their respective main surface or are outside the adjust zone. The nodes have been identified in node set WarnNodeMissMainIntersect.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '106 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SHIFT VALUE MAY NOT BE LESS THAN THE LOWEST FREQUENCY.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Windows\\system32\\Job-55555.odb', 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1892, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STEP, {'stepName': 'freq', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-55555', 'memory': 1404.0})
mdb.jobs['Job-55555']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(MINIMUM_MEMORY, {'minimum_memory': 141.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE MAY BE MORE EIGENVALUES IN THE SPECIFIED RANGE THAN REQUESTED. IF THE NUMBER OF EIGENVALUES WAS NOT EXPLICITLY REQUESTED, SPECIFY THE MAXIMUM NUMBER OF EIGENVALUES TO BE EXTRACTED', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 46, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 47, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 48, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 49, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 50, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 51, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 52, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 53, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 54, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 55, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 56, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 57, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 58, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 59, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 60, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 61, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 62, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 63, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 64, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 65, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 66, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 67, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 68, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 69, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 70, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 71, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 72, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 73, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 74, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 75, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 76, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 77, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 78, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 79, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 80, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 81, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 82, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 83, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 84, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 85, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 86, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 87, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 88, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 89, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 90, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 91, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 92, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 93, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 94, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 95, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 96, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 97, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 98, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 99, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 100, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 101, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 102, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 103, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 104, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 105, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 106, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 107, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 108, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 109, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 110, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 111, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 112, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 113, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 114, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 115, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 116, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 117, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 118, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 119, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 120, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 121, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 122, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 123, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 124, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 125, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 126, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 127, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 128, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 129, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 130, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 131, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 132, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 133, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 134, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 135, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 136, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 137, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 138, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 139, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 140, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 141, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 142, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 143, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 144, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 145, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 146, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 147, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 148, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 149, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 150, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 151, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 152, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 153, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 154, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 155, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 156, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 157, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 158, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 159, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 160, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 161, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 162, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 163, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 164, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 165, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 166, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 167, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 168, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 169, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 170, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 171, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 172, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 173, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 174, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 175, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 176, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 177, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 178, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 179, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 180, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 181, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 182, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 183, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 184, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 185, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 186, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 187, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 188, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 189, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 190, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 191, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 192, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 193, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 194, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 195, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 196, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 197, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 198, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 199, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 200, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'totalTime': 0.0, 'attempts': 1, 
    'timeIncrement': 1e-36, 'increment': 1, 'stepTime': 1e-36, 'step': 1, 
    'jobName': 'Job-55555', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-55555']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-55555', 'memory': 2727.0})
mdb.jobs['Job-55555']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(MINIMUM_MEMORY, {'minimum_memory': 397.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6239 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 200.0, 'increment': 1, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6394 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 203.260869565217, 'increment': 2, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6556 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 206.521739130435, 'increment': 3, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6715 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 209.782608695652, 'increment': 4, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6870 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 213.04347826087, 'increment': 5, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7025 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 216.304347826087, 'increment': 6, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7187 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 219.565217391304, 'increment': 7, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7350 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 222.826086956522, 'increment': 8, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7516 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 226.086956521739, 'increment': 9, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7682 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 229.347826086957, 'increment': 10, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7844 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 232.608695652174, 'increment': 11, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8007 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 235.869565217391, 'increment': 12, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8174 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 239.130434782609, 'increment': 13, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8339 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 242.391304347826, 'increment': 14, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8506 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 245.652173913043, 'increment': 15, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8675 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 248.913043478261, 'increment': 16, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8846 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 252.173913043478, 'increment': 17, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9019 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 255.434782608696, 'increment': 18, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9191 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 258.695652173913, 'increment': 19, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9366 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 261.95652173913, 'increment': 20, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9542 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 265.217391304348, 'increment': 21, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9719 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 268.478260869565, 'increment': 22, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9901 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 271.739130434783, 'increment': 23, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10079 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 275.0, 'increment': 24, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10257 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 278.260869565217, 'increment': 25, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10437 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 281.521739130435, 'increment': 26, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10616 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 284.782608695652, 'increment': 27, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10796 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 288.04347826087, 'increment': 28, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10975 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 291.304347826087, 'increment': 29, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11155 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 294.565217391304, 'increment': 30, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11334 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 297.826086956522, 'increment': 31, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11517 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 301.086956521739, 'increment': 32, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11699 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 304.347826086957, 'increment': 33, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11885 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 307.608695652174, 'increment': 34, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12074 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 310.869565217391, 'increment': 35, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12265 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 314.130434782609, 'increment': 36, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12455 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 317.391304347826, 'increment': 37, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12652 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 320.652173913043, 'increment': 38, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12845 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 323.913043478261, 'increment': 39, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13041 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 327.173913043478, 'increment': 40, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13237 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 330.434782608696, 'increment': 41, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13438 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 333.695652173913, 'increment': 42, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13634 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 336.95652173913, 'increment': 43, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13833 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 340.217391304348, 'increment': 44, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14032 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 343.478260869565, 'increment': 45, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14233 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 346.739130434783, 'increment': 46, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14433 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 350.0, 'increment': 47, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14638 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 353.260869565217, 'increment': 48, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14844 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 356.521739130435, 'increment': 49, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15050 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 359.782608695652, 'increment': 50, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15259 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 363.04347826087, 'increment': 51, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15467 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 366.304347826087, 'increment': 52, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15679 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 369.565217391304, 'increment': 53, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15889 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 372.826086956522, 'increment': 54, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16104 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 376.086956521739, 'increment': 55, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16316 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 379.347826086957, 'increment': 56, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16531 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 382.608695652174, 'increment': 57, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16743 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 385.869565217391, 'increment': 58, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16955 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 389.130434782609, 'increment': 59, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17172 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 392.391304347826, 'increment': 60, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17389 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 395.652173913043, 'increment': 61, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17607 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 398.913043478261, 'increment': 62, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17825 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 402.173913043478, 'increment': 63, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18045 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 405.434782608696, 'increment': 64, 'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18269 negative eigenvalues.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(STATUS, {'phase': STANDARD_PHASE, 'step': 2, 
    'frequency': 408.695652173913, 'increment': 65, 'jobName': 'Job-55555'})
mdb.jobs.changeKey(fromName='Job-55555', toName='Job-acoustic-honeycomb')
#* Jobs which are in process cannot be renamed.
mdb.jobs.changeKey(fromName='Job-55555', toName='Job-acoustic-honeycomb')
#* Jobs which are in process cannot be renamed.
mdb.jobs.changeKey(fromName='Job-55555', toName='Job-acoustic-honeycomb')
#* Jobs which are in process cannot be renamed.
# Save by mofid on 2025_07_21-06.51.15; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-55555']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-55555'})
mdb.jobs['Job-55555']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-55555'})
# Save by mofid on 2025_07_21-06.57.21; build 2023 2022_09_28-21.41.55 183150
